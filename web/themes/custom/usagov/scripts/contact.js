/**
 * The request, which should have been generated by clicking a link on the previous
 * Contact Elected Officials page, is expected to contain query parameters specifiying the
 * name and email address of the official to be emailed, as well as street address
 * provided by the user. In order to prevent cross-site-scripting exploits, this script looks
 * up the valid officials for that street address again, and finds the matching official for
 * the requested name and email address.
 *
 * If a matching official is found, their name, office, and email address are used to populate
 * this page and to generate a mailto: link when the user submits the form.
 *
 * If no match is found, we leave the page in its template state. Mailto: links work without
 * an email address -- the user just has to provide an address in their mail client! Of course,
 * there's no reason for them to use the form to send mail in this case, but at least it's safe
 * to do and we're not providing a vector for someone to trick people into mailing any old address.
 */


// Text strings for the page's language should be assigned to "usagovCEOtext" in
// an inline script in the page's Header HTML. The translations here are retained for backward compatibility.
const contact_translations = {
    "en": {
        "topic": "Please fill out the topic field.",
        "about": "Please fill out the about field.",
        "action": "Please fill out the action field.",
        "new_window": "Your message has been written, and a new window on the screen has opened with your email. Make sure to click send!",
        "subject": "A Message From a Constituent",
        "issue": "The issue that I am inquiring about is:",
        "concern": "My concerns regarding this issue are:",
        "idea": "And my ideas to address this issue are:"
    },
    "es": {
        "topic": "Por favor, escriba el tema. ",
        "about": "Por favor, escriba qué quiere decir acerca del tema.",
        "action": "Por favor, escriba su petición para el funcionario electo.",
        "new_window": 'Su mensaje ha sido escrito y se ha abierto una nueva ventana en la pantalla con su correo electrónico. Asegúrate de hacer clic en enviar ("send").',
        "subject": "Un mensaje de un ciudadano",
        "issue": "El tema sobre el que estoy preguntando es: ",
        "concern": "Mis inquietudes con respecto a este tema son:",
        "idea": "Y mis ideas para abordar este cuestión son:"
    }
};

let contact_content = (typeof usagovCEOtext !== "undefined") ? usagovCEOtext : contact_translations[ document.documentElement.lang ];
let foundOfficial = false; // This value is calculated in one function and used in more than one.

function getSearchParams() {
    "use strict";
    const paramsString = window.location.search;
    const searchParams = new URLSearchParams(paramsString);
    return searchParams;
}

function load() {
    "use strict";
    let searchParams = getSearchParams();
    let inputStreet = searchParams.get('input-street');
    let inputCity = searchParams.get('input-city');
    let inputState = searchParams.get('input-state');
    let inputZip = searchParams.get('input-zip');


    // Look up officials and verify that the selection (email, name, office) are valid.
    let normalizedAddress = inputStreet + ", " + inputCity + ", " + inputState + " " + inputZip;
    lookup(normalizedAddress, function(response, rawResponse) { validateAndDisplay(searchParams, response);});
}

function validateAndDisplay(searchParams, response) {
    "use strict";
    let email = searchParams.get('email');
    let name = searchParams.get('name');
    let foundEmail = '';

    let foundOfficialIndex = response.officials.findIndex(function(official) {
        if (official.name === name) {
            let email_index = official.emails.indexOf(email);
            if (email_index !== -1) {
                // Yes, we have just established that the email address
                // we're assigning to foundEmail is the same as the one
                // we got in the search string. We're going to use the string
                // we got via the gapi client because that isn't a potential
                // vector for cross-site-scripting or other exploits.
                foundEmail = official.emails[email_index];
                return true;
            }
        }
        return false;
    });

    let displayOfficial = document.getElementById("display-official");
    if (foundOfficialIndex !== -1) {
        foundOfficial = response.officials[foundOfficialIndex];
        foundOfficial['email'] = foundEmail;
        let foundOffice = response.offices.find(function(office) {
            return office.officialIndices.indexOf(foundOfficialIndex) !== -1;
        });
        let displayOffice = foundOffice ? foundOffice.name : '';
        displayOfficial.innerHTML = DOMPurify.sanitize(foundOfficial.name + "<br>" + displayOffice);
        let buttonAlt = document.getElementById("button-alt");
        buttonAlt.innerHTML += DOMPurify.sanitize(foundOfficial.email);
    }
    // If we didn't find the official, we should display some sort of error message,
    // but the page is okay with its default values and no email address.
}

/**
 * Execute mailto link based on user-submitted content.
 */
function writeMessage() {
    "use strict";
    let topicField = document.getElementById("input-topic");
    let aboutField = document.getElementById("input-about");
    let actionField = document.getElementById("input-action");
    let subject = "?subject=" + encodeURIComponent(contact_content.subject);
    let body = [];
    let email = foundOfficial ? foundOfficial.email : '';

    if (topicField.value !== "") {
        body.push(encodeURIComponent(contact_content.issue + "\n"));
        body.push(encodeURIComponent(topicField.value + "\n\n"));
    }
    if (aboutField.value !== "") {
        body.push(encodeURIComponent(contact_content.concern + "\n"));
        body.push(encodeURIComponent(aboutField.value + "\n\n"));
    }
    if (actionField.value !== "") {
        body.push(encodeURIComponent(contact_content.idea + "\n"));
        body.push(encodeURIComponent(actionField.value));
    }

    let body_string = "&body=" + body.join('');

    let mailtoLink = 'mailto:' + (email + subject + body_string);
    window.location.assign(mailtoLink);
}

/**
 * Build and execute request to look up elected officials for provided address.
 * @param {string} address Address for which to fetch elected officials info.
 * @param {function(Object)} callback Function which takes the response object as a parameter.
 */
function lookup(address, callback) {
    "use strict";
    /**
     * Request object for given parameters.
     * @type {gapi.client.HttpRequest}
     */

    let count=0;
    var timer = window.setInterval(function() {
        count++;
        if (typeof gapi.client !== "undefined") {
            window.clearInterval(timer);
            let req = gapi.client.request({
                "path": "/civicinfo/v2/representatives",
                "params": {"address": address}
            });
            req.execute(callback);
        }
        else if (count > 100) {
            // Stop trying after 100 attempts (10 seconds)
            window.clearInterval(timer);
        }
    }, 100);

}

/**
 * Initialize API client by setting the API key.
 */
 function setApiKey() {
    "use strict";
    gapi.client.setApiKey("AIzaSyDgYFMaq0e-u3EZPPhTrBN0jL1uoc8Lm0A");
}

// Load the GAPI Client Library
gapi.load("client", setApiKey);
document.addEventListener('DOMContentLoaded', function() {
    "use strict";
    load ();
});
