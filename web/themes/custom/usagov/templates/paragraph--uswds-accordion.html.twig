{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{%
  set classes = [
  'usa-accordion',
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'paragraph--id--' ~ paragraph.id.value,
  content.field_bordered['#items'].getString() ? 'usa-accordion--bordered'
]
%}

{% set multiselect = content.field_multiselect['#items'].getString() ? 'true' : 'false' %}

<div{{ attributes.addClass(classes) }} aria-multiselectable="{{ multiselect }}">
  <!-- Use the accurate heading level to maintain the document outline -->
  {% for key, item in content.field_accordion_section if key|first != '#' %}
    {% set id = item['#paragraph'].get('parent_id').value ~ '-' ~ key %}
    <h2 class="usa-accordion__heading">
      <button class="usa-accordion__button"
              aria-expanded="false"
              aria-controls="{{ id }}">
        {{ item['#paragraph'].field_accordion_section_title.value }}
      </button>
    </h2>
    <div id="{{ id }}" class="usa-accordion__content usa-prose" hidden>
      {# Loop through all of the accordion section bodies. #}
      {% for body_key, body_item in item['#paragraph'].field_accordion_section_body %}
        {# Use the same render array as item and set the '#paragraph'. #}
        {% set section_body = item %}
        {% set lang = section_body['#paragraph'].langcode[0].value %}

        {# Check if a translation exists #}
        {% if section_body['#paragraph'].field_accordion_section_body[body_key].entity.hasTranslation(lang) %}
          {# Load the entity for the current translation #}
          {% set section_translation= section_body['#paragraph'].field_accordion_section_body[body_key].entity.getTranslation(lang) %}
        {% else %}
          {# Load the source entity #}
          {% set section_translation= section_body['#paragraph'].field_accordion_section_body[body_key].entity %}
        {% endif %}

        {% set section_body = section_body|merge({'#paragraph': section_translation}) %}
        {# Remove the cache keys so it doesn't repeat the first value. #}
        {% set section_body = section_body|merge({'#cache': {}}) %}
        {# Print the compiled section body. #}
        {{ section_body }}
      {% endfor %}
    </div>
  {% endfor %}
</div>
