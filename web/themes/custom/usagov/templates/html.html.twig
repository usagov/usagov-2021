{#
/**
 * @file
 * Theme override for the basic structure of a single Drupal page.
 *
 * Variables:
 * - logged_in: A flag indicating if user is logged in.
 * - root_path: The root path of the current page (e.g., node, admin, user).
 * - node_type: The content type for the current node, if the page is a node.
 * - head_title: List of text elements that make up the head_title variable.
 *   May contain one or more of the following:
 *   - title: The title of the page.
 *   - name: The name of the site.
 *   - slogan: The slogan of the site.
 * - page_top: Initial rendered markup. This should be printed before 'page'.
 * - page: The rendered page markup.
 * - page_bottom: Closing rendered markup. This variable should be printed after
 *   'page'.
 * - db_offline: A flag indicating if the database is offline.
 * - placeholder_token: The token for generating head, css, js and js-bottom
 *   placeholders.
 *
 * @see template_preprocess_html()
 */
#}
{% set lang = node.langcode.value %}
{% set nodeID = node.nid[0].value %}
{% set path = drupal_url('node/'~nodeID) %}
{% set baseURL = url('<front>') %}
{% set url = baseURL|render~path|render[1:] %}
<!DOCTYPE html>
<html{{ html_attributes }}>
<head>
  <head-placeholder token="{{ placeholder_token|raw }}">
  <title>{{ head_title|safe_join(' | ') }}</title>
  <css-placeholder token="{{ placeholder_token|raw }}">
  <js-placeholder token="{{ placeholder_token|raw }}">
  {% if node.id is defined %}
    {{ node.field_header_html.value|raw }}
  {% endif %}
  <script>
    dataLayer = [{
      {{'nodeID'|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}: {{nodeID|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
      {{'contentType'|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}: {{nodetype|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
      {{'language'|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}: {{lang|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
      {{'homepageTest'|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}: {{front|json_encode(constant('JSON_PRETTY_PRINT'))|raw }},
      {{'basicPagesubType'|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}: {{pagetype|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}
    }];
  </script>
  <!-- Google Tag Manager -->
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-W8LW6DB');</script>
  <!-- End Google Tag Manager -->
  {% if front == "homepage" %}
   <!-- Social Media -->
    <meta property="fb:pages" content="65369158579" />
    <!-- End Social Media -->

    <!-- Website Verification -->
    <meta name="p:domain_verify" content="f3135f7662284cd99a63b43e8371757f"/>
    <meta name="google-site-verification" content="p7YQsJ1axaK_4XZeFOVM_tVuvS-hu5fUcEFT0vYJfTM" />
    <meta name="google-site-verification" content="QsZz3rz0kvdcs5rSqFjWMkxzQyDuH40vIohA8TYF1JI" />
    <meta name="msvalidate.01" content="7ED9318B2E16491CECD0F0CFCB5594E8" />
    <!-- End Website Verification -->
    {% if lang == 'en' %}
    <meta name="description" content="USA.gov can help you start your search for government information by topic and agency. " />
    {% else %}
    <meta name="description" content="Página principal de USAGov en Español, el portal oficial del Gobierno de Estados Unidos en español. " />
    {% endif %}
  {% endif %}
  {% if front == "not_homepage" and nodetype == "basic_page" %}
    <meta name="description" content="{{ node.field_page_intro.value }}" />
  {% endif %}

  {% if node_type == "wizard" and lang == "en" or node_type == "wizard_step" and lang == "en" %}
  <meta name="description" content="Have you experienced a scam and want to report it? Just answer a few questions to learn how to report the scam to the right place." />
  {% elseif node_type == "wizard" and lang == "es" or node_type == "wizard_step" and lang == "es" %}
  <meta name="description" content="¿Ha sufrido una estafa y quiere reportarla? Solo responda unas cuantas preguntas para saber cómo reportar la estafa en el lugar correcto." />
  {% endif %}
  <!-- Favicons -->
  <link rel="icon" href="/themes/custom/usagov/images/Favicon_USAGov.png">
  <link rel="apple-touch-icon-precomposed" href="/themes/custom/usagov/images/Favicon_USAGov.png">

  <!-- Social Media -->
  <meta property="og:url" content="{{ url }}" />
  <meta property="og:type" content="website" />
  <meta property="og:title" content="{{head_title|safe_join(' | ')}}" />
  {% if front == "homepage" and lang == 'en' %}
  <meta property="og:description" content="USA.gov can help you start your search for government information by topic and agency." />
  {% elseif front == "homepage" and lang == 'es' %}
  <meta property="og:description" content="Página principal de USAGov en Español, el portal oficial del Gobierno de Estados Unidos en español." />
  {% elseif node_type == "wizard" and lang == "en" or node_type == "wizard_step" and lang == "en" %}
  <meta name="description" content="Have you experienced a scam and want to report it? Just answer a few questions to learn how to report the scam to the right place." />
  {% elseif node_type == "wizard" and lang == "es" or node_type == "wizard_step" and lang == "es" %}
  <meta name="description" content="¿Ha sufrido una estafa y quiere reportarla? Solo responda unas cuantas preguntas para saber cómo reportar la estafa en el lugar correcto." />
  {% else %}
  <meta property="og:description" content="{{ node.field_page_intro.value }}" />
  {% endif %}
  <meta property="og:image" content="https://www.usa.gov/images/facebook_share_thumbnail.png" />
  <meta property="og:image:secure_url" content="https://www.usa.gov/images/facebook_share_thumbnail.png" />
  <!-- End Social Media -->

  <meta name="robots" content="noindex, nofollow" />

  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "url": "https://beta.usa.gov/",
      "logo": "https://beta.usa.gov/themes/custom/usagov/images/LOGO_betasite_USAGOV_v2.png"
    }
    </script>
</head>
<body{{ attributes }}>
  <!-- Google Tag Manager (noscript) -->
  <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-W8LW6DB"
  height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
  <!-- End Google Tag Manager (noscript) -->
{#
  Keyboard navigation/accessibility link to main content section in
  page.html.twig.
#}
<a href="#skip-to-h1" class="usa-skipnav usa-sr-only focusable">
 {{ lang == 'en' ? 'Skip to main content'|t : 'Saltar al contenido principal'|t }}
</a>
{{ page_top }}
{{ page }}
{{ page_bottom }}
<js-bottom-placeholder token="{{ placeholder_token|raw }}">
{% if node.id is defined %}
  {{ node.field_footer_html.value|raw }}
{% endif %}

<!-- Needed_for_USA.gov_uptime_check -->

{% if lang == "en" %}
<script type="text/javascript">
  //<![CDATA[
    var usasearch_config = { siteHandle:"usagov_all_gov" };
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://search.usa.gov/javascripts/remote.loader.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  //]]>
  </script>
  {% elseif lang == "es" %}
  <script type="text/javascript">
    //<![CDATA[
      var usasearch_config = { siteHandle:"usagov_es_all_gov" };
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "https://search.usa.gov/javascripts/remote.loader.js";
      document.getElementsByTagName("head")[0].appendChild(script);
    //]]>
    </script>
{% endif %}
<script type="text/javascript">
  // Set a variable for our button element.
const scrollToTopButton = document.getElementById('back-to-top');

// Let's set up a function that shows our scroll-to-top button if we scroll beyond the height of the initial window.
const scrollFunc = () => {
  // Get the current scroll value
  let y = window.scrollY;

  // If the scroll value is greater than the window height, let's add a class to the scroll-to-top button to show it!
  if (y > 500) {
    scrollToTopButton.className = "stuck";
  } else {
    scrollToTopButton.className = "";
  }
};

window.addEventListener("scroll", scrollFunc);

const scrollToTop = () => {
  // Let's set a variable for the number of pixels we are from the top of the document.
  const c = document.documentElement.scrollTop || document.body.scrollTop;

  // If that number is greater than 0, we'll scroll back to 0, or the top of the document.
  // We'll also animate that scroll with requestAnimationFrame:
  // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
  if (c > 0) {
    window.requestAnimationFrame(scrollToTop);
    // ScrollTo takes an x and a y coordinate.
    // Increase the '10' value to get a smoother/slower scroll!
    window.scrollTo(0, c - c / 10);
  }
};

// When the button is clicked, run our ScrolltoTop function above!
// scrollToTopButton.onclick = function(e) {
 // e.preventDefault();
// scrollToTop();
// }

</script>

<!-- siteimprove usability -->
<script type="text/javascript">
	/*<![CDATA[*/
	(function() {
	var sz = document.createElement('script'); sz.type = 'text/javascript'; sz.async = true;
	sz.src = '//siteimproveanalytics.com/js/siteanalyze_51567.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(sz, s);
	})();
	/*]]>*/
</script>
<!-- end siteimprove usability -->

<!-- begin code to remove tabindex from survey -->
<script type="text/javascript">
	// Select the node that will be observed for mutations
	//<![CDATA[
	var targetNode = document.getElementById('main-content');
	// Options for the observer (which mutations to observe)
	var config = { attributes: true, childList: true, subtree: true };

	// Callback function to execute when mutations are observed
	var callback = function(mutationsList, observer) {
		// Use traditional 'for loops' for IE 11
		for(let mutation of mutationsList) {
			if (mutation.type === 'childList') {
				console.log('A child node has been added or removed.');
				var c = document.querySelector(".QSIUserDefinedHTML").children[0].removeAttribute("tabindex"); console.log(c);
				// Later, you can stop observing
				observer.disconnect();
			}
			else if (mutation.type === 'attributes') {
				console.log('The ' + mutation.attributeName + ' attribute was modified.');

			}
		}
	};

	// Create an observer instance linked to the callback function
	var observer = new MutationObserver(callback);

	// Start observing the target node for configured mutations
	observer.observe(targetNode, config);
	//]]>
	</script>
<!-- end code to remove tabindex from survey  -->

<!-- Needed_for_USA.gov_uptime_check -->
<script src="/themes/custom/usagov/scripts/modifyMobileNav.js"></script>
</body>
</html>
