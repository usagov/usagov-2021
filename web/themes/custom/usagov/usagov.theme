<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 * USWDS Base sub-theme.
 *
 * Place your custom PHP code in this file.
 */

function usagov_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;

  // If the FAQ checkbox is checked, then parse the content to find questions and answers
  if ($node->hasField('field_faq_page') && $node->get('field_faq_page')[0]->value) {
    $variables['faq'] = generate_faq($node);
  }
}

/**
 * generate_faq takes a node, analyses the body content,
 * and returns an array of objects containing a question and answer
 */
function generate_faq(&$node) {
  $faq = [];

  // Set up a DomDocument with the node's body content
  $node_body = $node->get('body')[0]->value;
  $dom = new DomDocument();
  $dom->loadHTML($node_body);
  $elements = $dom->documentElement->childNodes[0]->childNodes;
  $answer = new DomDocument();
  $answer->loadHTML("<html><body></body></html>");

  // Count the number of H2s in the body content
  $numH2s = count($dom->getElementsByTagName('h2'));

  if ($numH2s > 1) {
    // There are multiple H2s
    // Each H2 is a question
    $question = "No Questions Found Yet";

    //loop through elements of the body content
    foreach ($elements as $element) {
      // Check the type of element
      if ($element->nodeName == "h2") {
        // $element is a new question
        // If there was an existing question, store it and the answer
        if ($question != "No Questions Found Yet") {
          $answer = faq_answer_inner_html($answer);
          $faq[] = (object) ['question' => $question, 'answer' => $answer];
        }

        // Set up the new question
        $question = $element->nodeValue;

        // Set up the new answer
        $answer = new DomDocument();
        $answer->loadHTML("<html><body></body></html>");

      }
      elseif ($element->nodeName == "drupal-paragraph") {
        // $element is an embedded paragraph
        faq_process_paragraph($element, $answer);
      }
      elseif ($element->nodeName == "#text") {
        // $element is a text node
        // This is white space that we can ignore.
      }
      else {
        // $element is some kind of content
        // Append the content to the current answer
        $importedNode = $answer->importNode($element, TRUE);
        $answer->documentElement->childNodes[0]->appendChild($importedNode);
      }
    }

    // If there was an existing question, store it and the answer
    if ($question != "No Questions Found Yet") {
      $answer = faq_answer_inner_html($answer);
      $faq[] = (object) ['question' => $question, 'answer' => $answer];
    }

  }
  else {
    // There are not multiple H2s
    // The H1 is the question
    $question = $node->getTitle();

    // Setup the answer
    $answer->loadHTML("<html><body></body></html>");

    // Append the intro to the answer
    $introText = $node->get('field_page_intro')[0]->value;
    $intro = $answer->createElement('p');
    $intro->textContent = $introText;
    $answer->documentElement->childNodes[0]->appendChild($intro);

    //loop through elements of the body content
    foreach ($elements as $element) {
      // Check the type of element
      if ($element->nodeName == "drupal-paragraph") {
        // $element is an embedded paragraph
        faq_process_paragraph($element, $answer);
      }
      elseif ($element->nodeName == "#text") {
        // $element is a text node
        // This is white space that we can ignore.
      }
      else {
        // $element is content for the answer
        // Append the content to the current answer
        $importedNode = $answer->importNode($element, TRUE);
        $answer->documentElement->childNodes[0]->appendChild($importedNode);
      }
    }

    $answer = faq_answer_inner_html($answer);
    $faq[] = (object) ['question' => $question, 'answer' => $answer];
  }
  return $faq;
}

function faq_process_paragraph(&$element, &$answer) {
  // Get the paragraph entity
  $uuid = $element->getAttribute('data-paragraph-id');
  $embedded_paragraph = \Drupal::service('entity.repository')->loadEntityByUuid('embedded_paragraphs', $uuid);
  $component = $embedded_paragraph->get('paragraph')[0]->entity;

  $variables['paragraph'] = $component;

  // Check if $component is a grey USWDS Alert
  if ($component->hasField('field_alert_body') && $component->get('field_alert_status')[0]->value == NULL) {

    // Create a <p> element with the alert's body content
    $alertBody = $component->get('field_alert_body')[0]->value;
    $alertElement = $answer->createElement('p');
    $alertElement->textContent = $alertBody;

    //Append the content to the current answer
    $answer->documentElement->childNodes[0]->appendChild($alertElement);
  }
}

function faq_answer_inner_html(&$answer) {
  // Remove data-mce-href attributes
  $links = $answer->getElementsByTagName('a');
  foreach ($links as $link) {
    $link->removeAttribute('data-mce-href');
  }

  // Get the HTML of the answer as a string
  $answer = $answer->saveHTML($answer->documentElement->childNodes[0]);

  // Remove 6 characters ("<body>") from the beginning and 7 characters ("</body>") from the end
  return substr($answer, 6, -7);
}

/**
 * children_of_active_menu_item is a recursive helper function for finding the children of the active menu item
 */
function children_of_active_menu_item(&$items) {
  $result = NULL;
  foreach ($items as $object) {
    if ($object['in_active_trail'] === TRUE) {
      $result = $object;
      break;
    }
  }
  if ($result === NULL) {
    return $items;
  }
  else {
    return children_of_active_menu_item($result['below']);
  }
}

/**
 * Process block content
 */
function usagov_preprocess_block(&$variables) {
  /**
   * Pass node value to pages so they can access node-based properties
   */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;

  /**
   * Pass pagetype to pages so they can know what type of page to render
   */
  if ($node && $node->hasField('field_page_type') && $node->get('field_page_type')[0]->target_id) {
    $pagetypeTid = $node->get('field_page_type')[0]->target_id;
    $variables['pagetype'] = Term::load($pagetypeTid)->getName();
  }

  /**
   * Pass menu data to nav pages so they can render links to their children
   */
  if ($variables['elements']['#id'] == 'navigation_page_items' || $variables['elements']['#id'] == 'navigation_page_items_spanish') {
    $added_contexts = ['url.path']; // Use url.query_args as well for an easier test case
    $variables['content']['#cache']['contexts'] = array_merge($variables['content']['#cache']['contexts'], $added_contexts);
    $variables['#cache']['contexts'] = array_merge($variables['#cache']['contexts'], $added_contexts);

    $items = $variables['content']['#items'];
    $children_of_active_menu_item = children_of_active_menu_item($items);
    $nav_page_items = [];
    foreach ($children_of_active_menu_item as $child) {
      try {
        $childNid = $child['url']->getRouteParameters()['node'];
        $childNode = Node::load($childNid);
        $data = new StdClass();
        $data->title = $childNode->get('title')->value;
        $data->url = $childNode->toUrl()->toString();
        if ($childNode->hasField('field_short_description') && $childNode->get('field_short_description')->value != "") {
          $data->description = $childNode->get('field_short_description')->value;
        }
        elseif ($childNode->hasField('field_page_intro') && $childNode->get('field_page_intro')->value != "") {
          $data->description = $childNode->get('field_page_intro')->value;
        }
        else {
          $data->description = $childNode->get('field_meta_description')->value;
        }

        if (
          $childNode->hasField('field_navigation_banner_image') &&
          count($childNode->get('field_navigation_banner_image')) &&
          $childNode->get('field_navigation_banner_image')[0]->entity
        ) {
          $data->navigation_banner_image = file_url_transform_relative(file_create_url(
            $childNode->get('field_navigation_banner_image')[0]->entity->get('field_media_image')->entity->getFileUri()
          ));
        }
        if ($childNode->hasField('field_css_icon') && count($childNode->get('field_css_icon'))) {
          $data->css_icon = $childNode->get('field_css_icon')[0]->value;
        }
        if ($childNode->hasField('promote')) {
          $data->promote = $childNode->get('promote')->value;
        }
        // $data->node = $childNode;
        array_push($nav_page_items, $data);
      }
      catch (Exception $e) {
        $menuItem = $child['original_link']->getPluginDefinition();
        $data = new StdClass();
        $data->title = $menuItem['title'];
        $data->url = $menuItem['url'];
        if (strncmp($data->url, "base:", 5) === 0) {
          $data->url = "/" . substr($data->url, 5);
        }
        $data->description = $menuItem['description'];
        array_push($nav_page_items, $data);
      }
    }
    $variables['nav_page_items'] = $nav_page_items;
  }
}

function usagov_preprocess_views_view_list(&$variables) {
  $variables['node'] = \Drupal::routeMatch()->getParameter('node');
}

function usagov_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'views_view_fields') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_fields__sub_children';
    }
  }
  if ($hook == 'views_view_field') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_field__sub_children';
    }
  }
  if ($hook == 'views_view') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view__sub_children';
    }
  }
  if ($hook == 'views_view_list') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_list__sub_children';
    }
  }
  if ($hook == 'field') {
    if (in_array('field__node__field_custom_twig_content', $suggestions) &&
        $variables['element']['#object']->field_custom_twig_content->value) {
      $current_path = \Drupal::service('path.current')->getPath();
      $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
      $no_slash = ltrim($current_alias, '/');
      $no_dash = str_replace('-', '_', $no_slash);
      $suggestions[] = 'field__node__field_custom_twig_content_' . $no_dash;
    }
  }
}
