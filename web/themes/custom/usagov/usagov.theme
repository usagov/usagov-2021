<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 * USWDS Base sub-theme.
 *
 * Place your custom PHP code in this file.
 */

function usagov_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;

  // If the FAQ checkbox is checked, then parse the content to find questions and answers
  if ($node?->hasField('field_faq_page') && $node->get('field_faq_page')[0]?->value) {
    $variables['faq'] = generate_faq($node);
  }
}

/**
 * generate_faq takes a node, analyses the body content,
 * and returns an array of objects each containing a question and answer
 */
function generate_faq(&$node) {
  $faq = [];

  // Set up a DOMDocument with the node's body content
  $node_body = $node->get('body')[0]->value;
  $dom = new DOMDocument();
  libxml_use_internal_errors(TRUE);
  $dom->loadHTML('<?xml encoding="UTF-8">' . $node_body);
  libxml_clear_errors();

  // Make component content compatible with FAQ
  faq_process_components($dom);

  // Setup the list of elements from the processed content
  $elements = $dom->documentElement->childNodes[0]->childNodes;
  // Setup the first answer
  $answer = new DOMDocument();
  $answer->loadHTML('<?xml encoding="UTF-8"><html><body></body></html>');

  // Count the number of H2s in the body content
  $numH2s = count($dom->getElementsByTagName('h2'));

  if ($numH2s > 1) {
    // There are multiple H2s
    // Each H2 is a question
    $question = "No Questions Found Yet";

    // Loop through elements of the body content
    foreach ($elements as $element) {
      // Check the type of element
      if ($element->nodeName == "h2") {
        // $element is a new question
        // If there was an existing question, store it and the answer
        if ($question != "No Questions Found Yet") {
          $answer = faq_answer_inner_html($answer);
          if ($question && $answer) {
            $faq[] = (object) ['question' => $question, 'answer' => $answer];
          }
        }

        // Set up the next question
        $question = $element->nodeValue;

        // Set up the next answer
        $answer = new DOMDocument();
        $answer->loadHTML('<?xml encoding="UTF-8"><html><body></body></html>');

      }
      elseif ($element->nodeName == "drupal-paragraph") {
        // $element is a paragraph component that should not be displayed
        // Skip it
      }
      elseif ($element->nodeName == "#text") {
        // $element is a text node
        // This is white space that we can ignore.
      }
      else {
        // $element is some kind of content
        // Append the content to the current answer
        $importedNode = $answer->importNode($element, TRUE);
        $answer->documentElement->childNodes[0]->appendChild($importedNode);
      }
    }

    // If there was an existing question, store it and the answer
    if ($question != "No Questions Found Yet") {
      $answer = faq_answer_inner_html($answer);
      if ($question && $answer) {
        $faq[] = (object) ['question' => $question, 'answer' => $answer];
      }
    }

  }
  else {
    // There are not multiple H2s
    // The H1 is the question
    $question = $node->getTitle();

    // Append the intro to the answer
    $introText = $node->get('field_page_intro')[0]->value;
    if ($introText) {
      $intro = $answer->createElement('p');
      $intro->textContent = $introText;
      $answer->documentElement->childNodes[0]->appendChild($intro);
    }

    // Loop through elements of the body content
    foreach ($elements as $element) {
      if ($element->nodeName == "#text") {
        // $element is a text node
        // This is white space that we can ignore.
      }
      else {
        // $element is content for the answer
        // Append the content to the current answer
        $importedNode = $answer->importNode($element, TRUE);
        $answer->documentElement->childNodes[0]->appendChild($importedNode);
      }
    }

    $answer = faq_answer_inner_html($answer);
    if ($question && $answer) {
      $faq[] = (object) ['question' => $question, 'answer' => $answer];
    }
  }
  return $faq;
}

/**
 * faq_process_components gets components from drupal paragraph embeds
 * and makes their content compatible with FAQ rich results
 */
function faq_process_components(&$dom) {
  // Iterate through embedded paragraphs
  $embeddedParagraphElements = $dom->getElementsByTagName('drupal-paragraph');
  // Loop backwards to allow for removing elements along the way without losing track of our position
  for ($n = $embeddedParagraphElements->length - 1; $n >= 0; --$n) {
    $element = $embeddedParagraphElements->item($n);
    // Get the component
    $uuid = $element->getAttribute('data-paragraph-id');
    $embedded_paragraph = \Drupal::service('entity.repository')->loadEntityByUuid('embedded_paragraphs', $uuid);
    $component = $embedded_paragraph->get('paragraph')[0]->entity;

    // Process component by its type
    if ($component == NULL) {
      // No entity exists for this paragraph component. It is probably a reference to a deleted component.
      // Remove the element and move on.
      $element->parentNode->removeChild($element);
      break;
    }
    $componentType = $component->getType();
    if ($componentType == "uswds_accordion") {

      // iterate through accordion panels
      foreach ($component->get('field_accordion_section') as $accordionPanel) {
        // Get the accordion panel's node
        $accordionPanelTID = $accordionPanel->get('target_id')->getValue();
        $accordionPanelNode = \Drupal::entityTypeManager()->getStorage('paragraph')->load($accordionPanelTID);

        // Get this panel's button text and add it to the dom as an h2
        $accordionPanelButtonText = $accordionPanelNode->get('field_accordion_section_title')[0]->value;
        $accordionHeading = $dom->createElement('h2');
        $accordionHeading->textContent = $accordionPanelButtonText;
        $element->parentNode->insertBefore($accordionHeading, $element);

        // Get this panel's body content
        $accordionPanelBodyNodeID = $accordionPanelNode->get('field_accordion_section_body')[0]->get('target_id')->getValue();
        $accordionPanelBodyNode = \Drupal::entityTypeManager()->getStorage('paragraph')->load($accordionPanelBodyNodeID);

        // append accordion body content
        $accordionBody = new DOMDocument();
        $accordionBody->loadHTML('<?xml encoding="UTF-8">' . $accordionPanelBodyNode->get('field_text')[0]->value);
        foreach ($accordionBody->documentElement->childNodes[0]->childNodes as $accordionBodyElement) {
          $accordionBodyElement = $dom->importNode($accordionBodyElement, TRUE);
          if ($accordionBodyElement) {
            $element->parentNode->insertBefore($accordionBodyElement, $element);
          }
        }
      }
    }
    elseif ($componentType == "uswds_alert" && $component?->get('field_alert_status')[0]?->value == NULL) {
      // $component is a grey alert

      // Insert a <p> element with the alert's body content
      $alertBody = $component->get('field_alert_body')[0]->value;
      $alertElement = $dom->createElement('p');
      $alertElement->textContent = $alertBody;
      $element->parentNode->insertBefore($alertElement, $element);
    }
    elseif ($componentType == "uswds_process_list") {
      $simplifiedList = faq_simplify_list($dom, $component, "ol", 'field_process_items', 'field_text');
      $element->parentNode->insertBefore($simplifiedList, $element);
    }
    elseif ($componentType == "uswds_icon_list") {
      $simplifiedList = faq_simplify_list($dom, $component, "ul", 'field_uswds_icon_list_item', 'field_text_plain_long');
      $element->parentNode->insertBefore($simplifiedList, $element);
    }

    // Remove this paragraph element
    $element->parentNode->removeChild($element);
  }
}

/**
 * faq_simplify_list takes a USWDS list component (Process List or Icon List) and
 * returns a DOM Element containing the component's content in a simple HTML list
 */
function faq_simplify_list(&$dom, &$component, $listType, $itemsFieldName, $bodyFieldName) {
  // Create a list element of the specified type
  $processListSimplified = $dom->createElement($listType);

  // Iterate through component items by field name
  foreach ($component->get($itemsFieldName) as $process_item) {
    $processItemNode = \Drupal::entityTypeManager()->getStorage('paragraph')->load($process_item->get('target_id')->getValue());

    // Create a new <li> for this list item
    $processItemContent = $dom->createElement('li');

    // Create a DOMDocument with the body content from this list item
    $processItemBody = new DOMDocument();
    $processItemBody->loadHTML('<?xml encoding="UTF-8">' . $processItemNode->get($bodyFieldName)[0]->value);

    // Append each from this list item to the <li>
    foreach ($processItemBody->documentElement->childNodes[0]->childNodes as $processItemBodyElement) {
      $processItemBodyElement = $dom->importNode($processItemBodyElement, TRUE);
      if ($processItemBodyElement) {
        $processItemContent->appendChild($processItemBodyElement);
      }
    }

    // Append the <li> to the list element
    $processListSimplified->appendChild($processItemContent);
  }
  return $processListSimplified;
}

/**
 * faq_answer_inner_html takes a DOMDocument and returns a string of HTML within the body tag.
 * It also removes data-mce-href attributes.
 */
function faq_answer_inner_html(&$answer) {
  // Remove data-mce-href attributes
  $links = $answer->getElementsByTagName('a');
  foreach ($links as $link) {
    $link->removeAttribute('data-mce-href');
  }

  // Get the HTML of the answer as a string
  $answer = $answer->saveHTML($answer->documentElement->childNodes[0]);

  // Remove 6 characters ("<body>") from the beginning and 7 characters ("</body>") from the end
  return substr($answer, 6, -7);
}

/**
 * children_of_active_menu_item is a recursive helper function for finding the children of the active menu item
 */
function children_of_active_menu_item(&$items) {
  $result = NULL;
  foreach ($items as $object) {
    if ($object['in_active_trail'] === TRUE) {
      $result = $object;
      break;
    }
  }
  if ($result === NULL) {
    return $items;
  }
  else {
    return children_of_active_menu_item($result['below']);
  }
}

/**
 * Process paragraph content
 */
function usagov_preprocess_paragraph(&$variables) {
  /**
   * Pass node value to pages so they can access node-based properties
   */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;
}

/**
 * Process block content
 */
function usagov_preprocess_block(&$variables) {
  /**
   * Pass node value to pages so they can access node-based properties
   */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;

  /**
   * Pass pagetype to pages so they can know what type of page to render
   */
  if ($node && $node->hasField('field_page_type') && $node->get('field_page_type')[0]->target_id) {
    $pagetypeTid = $node->get('field_page_type')[0]->target_id;
    $variables['pagetype'] = Term::load($pagetypeTid)->getName();
  }

  /**
   * Pass menu data to nav pages so they can render links to their children
   */
  if ($variables['elements']['#id'] == 'navigation_page_items' || $variables['elements']['#id'] == 'navigation_page_items_spanish') {
    $added_contexts = ['url.path']; // Use url.query_args as well for an easier test case
    $variables['content']['#cache']['contexts'] = array_merge($variables['content']['#cache']['contexts'], $added_contexts);
    $variables['#cache']['contexts'] = array_merge($variables['#cache']['contexts'], $added_contexts);

    $items = $variables['content']['#items'];
    $children_of_active_menu_item = children_of_active_menu_item($items);
    $nav_page_items = [];
    foreach ($children_of_active_menu_item as $child) {
      $data = new StdClass();
      //Must get title, description and url if available; Try to get other fields

      //Get Title & URL (Required Fields- Can Call Together)
      try {
        $childNid = $child['url']->getRouteParameters()['node'];
        $childNode = Node::load($childNid);
        $data->title = $childNode->get('title')->value;
        $data->url = $childNode->toUrl()->toString();
      }
      catch (Exception $e) {
        $menuItem = $child['original_link']->getPluginDefinition();
        $data->title = $menuItem['title'];

        $data->url = $menuItem['url'];
        if (strncmp($data->url, "base:", 5) === 0) {
          $data->url = "/" . substr($data->url, 5);
        }
      }

      //Get Description (Optional Field - A catch on this shouldn't trigger a catch on title or url)
      try {
        $childNid = $child['url']->getRouteParameters()['node'];
        $childNode = Node::load($childNid);
        if ($childNode->hasField('field_short_description') && $childNode->get('field_short_description')->value != "") {
          $data->description = $childNode->get('field_short_description')->value;
        }
        elseif ($childNode->hasField('field_page_intro') && $childNode->get('field_page_intro')->value != "") {
          $data->description = $childNode->get('field_page_intro')->value;
        }
        else {
          $data->description = $childNode->get('field_meta_description')->value;
        }
      }
      catch (Exception $e) {
        $menuItem = $child['original_link']->getPluginDefinition();
        $data->description = $menuItem['description'];
      }

      // Try for other fields
      try {
        $childNid = $child['url']->getRouteParameters()['node'];
        $childNode = Node::load($childNid);
        if (
          $childNode->hasField('field_navigation_banner_image') &&
          count($childNode->get('field_navigation_banner_image')) &&
          $childNode->get('field_navigation_banner_image')[0]->entity
        ) {
          $file_url_generator = \Drupal::service('file_url_generator');
          //to allow for image_style (webp compression) to apply
          $banner_uri = $childNode->get('field_navigation_banner_image')[0]->entity->get('field_media_image')->entity->getFileUri();
          $data->navigation_banner_image = $banner_uri;
        }
        if ($childNode->hasField('field_css_icon') && count($childNode->get('field_css_icon'))) {
          $data->css_icon = $childNode->get('field_css_icon')[0]->value;
        }
        if ($childNode->hasField('promote')) {
          $data->promote = $childNode->get('promote')->value;
        }
      }
      catch (Exception $e) {
      }

      array_push($nav_page_items, $data);
    }
    $variables['nav_page_items'] = $nav_page_items;
  }
}

function usagov_preprocess_views_view_list(&$variables) {
  $variables['node'] = \Drupal::routeMatch()->getParameter('node');
}

function usagov_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'views_view_fields') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_fields__sub_children';
    }
  }
  if ($hook == 'views_view_field') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_field__sub_children';
    }
  }
  if ($hook == 'views_view') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view__sub_children';
    }
  }
  if ($hook == 'views_view_list') {
    $id = $variables['view']->storage->id();
    if ($id == "sub_children") {
      $suggestions[] = 'views_view_list__sub_children';
    }
  }
  if ($hook == 'field') {
    if (in_array('field__node__field_custom_twig_content', $suggestions) &&
        $variables['element']['#object']->field_custom_twig_content->value) {
      $current_path = \Drupal::service('path.current')->getPath();
      $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
      $no_slash = ltrim($current_alias, '/');
      $no_dash = str_replace('-', '_', $no_slash);
      $suggestions[] = 'field__node__field_custom_twig_content_' . $no_dash;
    }
  }
}
