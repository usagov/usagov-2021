<?php

/**
 * @file
 * Create step-by-step sequences (wizards) of excerpts from forms.
 *
 * (c) 2017, 2019 Martin Quested & Brad Greco.
 * This module may be distributed under the terms of GPL version 2.0 or later.
 */

use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\stepbystep\Plugin\SequenceInterface;
use Drupal\stepbystep\SequenceManager;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_form_alter().
 *
 * Adapts a form, if parameters are set in the URL query, to become a step in a
 * Step by Step sequence.
 */
function stepbystep_form_alter(&$form, $form_state, $form_id) {
  if (SequenceManager::isSequenceActive()) {
    /** @var \Drupal\stepbystep\SequenceManager $sequence_manager */
    $sequence_manager = \Drupal::service('plugin.manager.stepbystep_sequence');
    try {
      // Load the sequence plugin from the request and ask it to alter the form.
      $sequence = $sequence_manager->createInstanceFromRequest(\Drupal::request());
      $sequence->alterForm($form, $form_state, $form_id);
    }
    catch (PluginNotFoundException $e) {
      // 404 if the sequence does not exist.
      throw new NotFoundHttpException($e->getMessage());
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Alters local tasks (tabs) on pages where a Step by Step sequence is active.
 */
function stepbystep_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  // Set the cache contexts to the Step by Step query parameters so the local
  // tasks will be cached separately when a sequence is active vs not active.
  // Must be done before the isSequenceActive() check, to ensure the cache
  // contexts are always set properly.
  $cacheability->addCacheContexts(SequenceManager::getSequenceCacheContexts());
  if (SequenceManager::isSequenceActive()) {
    /** @var \Drupal\stepbystep\SequenceManager $sequence_manager */
    $sequence_manager = \Drupal::service('plugin.manager.stepbystep_sequence');
    $sequence = $sequence_manager->createInstanceFromRequest(\Drupal::request());
    $sequence->alterLocalTasks($data, $route_name, $cacheability);
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 * Add the Step by Step query parameters as breadcrumb cache contexts so
 * breadcrumbs will be cached separately when a sequence is active vs not
 * active. Need to do this for all breadcrumbs so that if a page is first
 * visited normally, and later visited as part of a sequence, it will not retain
 * its normal breadcrumbs.
 *
 * @see \Drupal\stepbystep\SequenceBreadcrumbBuilder
 */
function stepbystep_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  $breadcrumb->addCacheContexts(SequenceManager::getSequenceCacheContexts());
}

/**
 * Implements hook_theme().
 */
function stepbystep_theme($existing, $type, $theme, $path) {
  return [
    'stepbystep_sequence_progress' => [
      'variables' => [
        'caption' => NULL,
        'steps' => [],
        'progress' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for Step by Step sequence progress.
 *
 * Default template: stepbystep-sequence-progress.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *    - caption: Text to show near the list of steps.
 *    - steps: Array of steps in the sequence, keyed by ID.
 *    - progress: Array of statuses for each step, keyed by step ID.
 */
function template_preprocess_stepbystep_sequence_progress(array &$variables) {
  // Create links to the steps.
  foreach ($variables['steps'] as &$step) {
    $step['link'] = !empty($step['url'])
      ? Link::fromTextAndUrl($step['title'], $step['url'])
      : $step['title'];
  }
  // Convert status machine names to display names.
  $status_labels = [
    SequenceInterface::COMPLETED => t('Completed'),
    SequenceInterface::SKIPPED => t('Skipped'),
    SequenceInterface::NOT_APPLICABLE => t('Not applicable'),
  ];
  foreach ($variables['progress'] as &$status) {
    $status = $status_labels[$status];
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu_local_action.
 *
 * When a Step by Step sequence is active, alters the local actions on a step
 * to include a ?destination query to return to the sequence after the action
 * is performed.
 *
 * Once https://www.drupal.org/project/drupal/issues/2585169 is completed,
 * it would be better to use hook_local_actions_render_alter() instead of
 * using hook_preprocess_HOOK().
 */
function stepbystep_preprocess_menu_local_action(&$variables) {
  // Add the Step by Step query parameters to the cache contexts so the local
  // actions will be cached separately when a sequence is active vs not active.
  // Must be done before the isSequenceActive() check, to ensure the cache
  // contexts are always set properly.
  $stepbystep_cache_contexts = SequenceManager::getSequenceCacheContexts();
  array_push($variables['#cache']['contexts'], ...$stepbystep_cache_contexts);
  if (SequenceManager::isSequenceActive()) {
    $destination = \Drupal::destination()->getAsArray();
    // Add the ?destination query parameter to the existing URL.
    $variables['link']['#url']->mergeOptions(['query' => $destination]);
  }
}

/**
 * Implements hook_preprocess_HOOK() for Views pages.
 *
 * Setting the #title of a View has no effect on its own. If a custom title for
 * the page was set in SequenceBase::alterForm(), copy the value to the correct
 * location here where it will be used as the page title.
 */
function stepbystep_preprocess_views_view__page(&$variables) {
  if (!empty($variables['rows']['#stepbystep_title_override'])) {
    $variables['view_array']['#title'] = $variables['rows']['#stepbystep_title_override'];
  }
}
