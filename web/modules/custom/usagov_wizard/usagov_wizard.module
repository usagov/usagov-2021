<?php

/**
 * @file
 * Hooks for hogwarts.
 *
 * Send variables to the wizard breadcrumbs and page twig,
 * create new theme suggestions, and alter the form.
 */

use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\usagov_wizard\MenuChecker;

/**
 * Implements hook_form_alter().
 *
 * Alter the form by adding a "View Term" button
 * if the form is the taxonomy_term_wizard_form.
 */
function usagov_wizard_form_taxonomy_term_wizard_form_alter(&$form, &$form_state) {
  if (isset($form['tid'])) {
    $url = Url::fromUri('base:' .
      ($form['langcode']['widget'][0]['value']['#default_value'] == 'en' ? '' : 'es/')
      . 'taxonomy/term/' . $form['tid']["#value"]);

    $form['actions']['link_to_term'] = [
      '#title' => t('View Term'),
      '#type' => 'link',
      '#url' => $url,
      '#attributes' => [
        'class' => [
          'button',
          'usa-button',
        ],
      ],
      '#weight' => 10,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Check the field_tracking boolean, send information to twig if set to true.
 * Use this to determine whether to display crazyegg tracking script.
 */
function usagov_wizard_preprocess_html(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if (isset($taxonomy_term->field_header_html)) {
      if (isset($taxonomy_term->field_header_html->value)) {
        $variables['header_html'] = $taxonomy_term->field_header_html->value;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function usagov_wizard_theme_suggestions_page_alter(array &$suggestions, array &$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    $suggestions[] = 'page__taxonomy__term__' . $taxonomy_term->vid->getValue()[0]['target_id'];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function usagov_wizard_theme_suggestions_breadcrumb_alter(array &$suggestions, array &$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    $suggestions[] = 'breadcrumb__' . $taxonomy_term->vid->getValue()[0]['target_id'];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Custom region_header_top so we can have a custom mobile nav menu generated
 * from MenuChecker.php.
 */
function usagov_wizard_theme_suggestions_region_alter(array &$suggestions, array &$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    $suggestions[] = 'region__' . $variables['elements']['#region'] . '_' . $taxonomy_term->vid->getValue()[0]['target_id'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess the page by retrieving information about the taxonomy term,
 * checking its parent terms, and matching it with menu entities.
 * The matched menu entities are then sorted by weight and added to the page
 * variables.
 */
function usagov_wizard_preprocess_page(&$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    if ($taxonomy_term->bundle() === 'wizard') {
      $menuChecker = \Drupal::classResolver(MenuChecker::class);

      // Get an array of the current taxonomy term id and all of its parent ids.
      $termParents = $menuChecker->getTermParents($taxonomy_term);

      $langcode = $variables['language']->getId();

      /* Get an array of all the menu entities in the specified menu leading to
      taxonomy terms.*/
      $menuEntities = $menuChecker->getMenuEntities($langcode);

      $wizardMenuEntities = [];
      // See if there are any matches between the ids in the current wizard and
      // the ids of the taxonomy terms linked to in the menu.
      if (isset($menuEntities)) {
        foreach ($termParents as $key) {
          if (array_key_exists($key, $menuEntities)) {
            $wizardMenuEntities = array_merge($wizardMenuEntities, $menuEntities[$key]);
          }
        }
        /* If there are matches, send information about the menu entities to the
        twig.*/
        if (isset($wizardMenuEntities)) {
          foreach ($wizardMenuEntities as $wizardMenuEntity) {
            $entities = array_map(function ($wizardMenuEntity) {
              return [
                'label' => $wizardMenuEntity->title->value,
                'link' => Url::fromUri($wizardMenuEntity->link->uri)
                  ->toString(),
                'weight' => $wizardMenuEntity->getWeight(),
              ];
            }, $wizardMenuEntities);
            usort($entities, function ($item1, $item2) {
              return $item1['weight'] <=> $item2['weight'];
            });

            $variables['menu_entities'] = $entities;
            $variables['page']['header_top']['#menu_entities'] = $entities;
          }
        }
      }
    }

    if (isset($taxonomy_term->field_language_toggle[0]->target_id)) {
      $variables['translation'] = $taxonomy_term->field_language_toggle->getValue()[0]['target_id'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Determine where the current page sits in the taxonomy hierarchy and send this
 * information to the twig so we can decide which of the "previous, next, start
 * over' buttons/links to show.
 */
function usagov_wizard_preprocess_taxonomy_term(&$variables) {
  if ($variables['term']->bundle() == 'wizard') {
    $parent_tid = $variables['term']->hasField('parent') ? $variables['term']->get('parent')->target_id : NULL;
    $variables['parent_tid'] = $parent_tid;

    /* If there's a parent_tid, this is a child page.
     * In the twig, use this information to decide whether to display the
     * previous button. Use the url from the $parent_tid to set the path in that
     * button
     */

    if ($parent_tid) {
      $variables['child'] = TRUE;
    }
    else {
      $variables['child'] = FALSE;
    }

    $term_children = Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadChildren($variables['term']->id());
    if (!empty($term_children)) {
      $variables['has_child'] = TRUE;
    }
    else {
      $variables['has_child'] = FALSE;
    }

    $menuChecker = \Drupal::classResolver(MenuChecker::class);
    $parents = $menuChecker->getTermParents($variables['elements']['#taxonomy_term']);

    /*
     * Get an array of all the term's parents. Check the last loop of the array.
     * This is the root of the tree. Set the $root_tid to equal $parent. If the
     * page we are on is not the root of the tree (parent_tid != root_tid) and
     * the page we are on is not the root itself, tell the twig to show the
     * start_over link.
     *
     * Finally, check the second to last loop of the array.
     * The url for the start_over link should be the tid of this loop.
     */
    $counter = 0;
    foreach ($parents as $parent) {
      if ($counter == count($parents) - 1) {
        $root_tid = $parent;
        if ($parent_tid != $root_tid && $root_tid != $variables['term']->id()) {
          $variables['start_over'] = 'true';
        }
        else {
          $variables['start_over'] = 'false';
        }
      }
      elseif ($counter == count($parents) - 2) {
        $variables['start_over_target_tid'] = $parent;
      }
      $counter = $counter + 1;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Breadcrumbs should have a structure like this: “Home -> Parent left nav menu
 * link -> Name of first wizard page. In the current setup this would be
 * “Home -> How to report a scam -> USA.gov where to report a scam tool”.
 * This breadcrumb setup should not change throughout the wizard.
 *
 * By default, breadcrumbs are set up to utilize the term name. This needs to be
 * altered in a couple of ways.
 *
 * For one, the second item in the breadcrumb, "How to report a scam", should be
 * the text of the menu entity, so the menu needs to be hooked up to the
 * breadcrumb similarly to how it was done for the left nav.
 *
 * For another thing, the third item in the breadcrumb "USA.gov where to report
 * a scam tool", should be the field_heading of that term, not the name.
 * This will need to be accomplished in a preprocess hook.
 */
function usagov_wizard_preprocess_breadcrumb(&$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    if ($taxonomy_term->bundle() == 'wizard') {
      $menuChecker = \Drupal::classResolver(MenuChecker::class);
      $langcode = $taxonomy_term->langcode->value;

      $parent_headings = $menuChecker->getHeadings($taxonomy_term);

      $menuEntities = $menuChecker->getMenuEntities($langcode);

      if (isset($menuEntities)) {
        if (is_array($menuEntities)) {
          $termParents = $menuChecker->getTermParents($taxonomy_term);
          /* If the current page matches a menu entity with the custom_parent
          field set to true.*/
          foreach ($termParents as $key) {
            if (array_key_exists($key, $menuEntities)) {
              foreach ($menuEntities[$key] as $wizardMenuEntity) {
                if ($wizardMenuEntity->field_custom_parent->value == 1) {
                  /* Set our breadcrumbs here so if there's a duplicate, we
                  use the breadcrumbs from the part of the menu with
                  field_custom_parent = true. */

                  $wizard_title = $wizardMenuEntity->title->value;
                  $wizard_title_url = substr($wizardMenuEntity->link->uri, strpos($wizardMenuEntity->link->uri, "/"));
                  $parentEntityUuid = $wizardMenuEntity->parent->value;
                  if (isset($parentEntityUuid)) {
                    $parentEntity = \Drupal::service('entity.repository')
                      ->loadEntityByUuid('menu_link_content', explode(':', $parentEntityUuid));
                  }
                }
              }
            }
          }
        }
      }
      else {
        return;
      }
    }
    // Use that to determine the second item in the breadcrumb.
    if (isset($wizard_title)) {
      $variables['breadcrumb']['1']['text'] = $wizard_title;
      $variables['breadcrumb']['1']['url'] = $wizard_title_url;

      /*
       *  And, if we are on the page that corresponds with the second item,
       *  remove that page from the array.
       */
      if (isset($variables['breadcrumb']['2'])) {
        if ($variables['breadcrumb']['2']['text'] == $wizard_title) {
          unset($variables['breadcrumb']['1']);
          unset($variables['breadcrumb']['2']);
          return;
        }
        elseif (strlen($variables['breadcrumb']['2']['url']) < 1) {
          unset($variables['breadcrumb']['2']);
        }
      }
    }
    $i = 0;
    // Set the third item in the breadcrumb to be the field_heading.
    foreach ($variables['breadcrumb'] as &$breadcrumb) {
      /* Dont do anything to the second breadcrumb, since this one has a weird
      naming system. */
      if ($i++ == 1) {
        continue;
      }
      foreach ($parent_headings as $parent_heading) {
        if (is_string($breadcrumb['text']) && $parent_heading['name'] ===
          $breadcrumb['text']) {
          $breadcrumb['text'] = $parent_heading['label'];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function usagov_wizard_preprocess_views_view_field__wizard_options(&$variables) {
  // The tid of the term that is generating the option.
  $target_taxonomy_term = $variables['row']->tid;
  $term = Term::load($target_taxonomy_term);

  if (isset($term->field_option_name)) {
    $option_name = $term->field_option_name->value;
  }

  $variables['option_name'] = $option_name;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function usagov_wizard_preprocess_views_view_unformatted(&$variables) {
  $taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($taxonomy_term instanceof Term) {
    if ($taxonomy_term->bundle() == 'wizard') {
      $tid = $taxonomy_term->id();
      $term = Term::load($tid);
      if (isset($term->field_heading->value)) {
        if (strlen($term->field_heading->value > 1)) {
          $variables['legend'] = $term->field_heading->value;
        }
      }
      elseif (isset($term->name)) {
        $variables['legend'] = $term->name;
      }
    }
  }
}
