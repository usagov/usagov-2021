<?php

/**
 * @file
 * Use proprocess for html twig.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\path_alias\PathAliasInterface;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Description message.
 *
 * @param mixed $variables
 *   Self described.
 * @param mixed $hook
 *   Self described.
 */
function usa_twig_vars_preprocess(&$variables, $hook) {
  if ($hook === 'html' || $hook === 'page') {
    $usa_twig_vars = &drupal_static(__FUNCTION__);
    if (!isset($usa_twig_vars)) {
      // pre-populate $usa_twig_vars so we can rely on certain fields being present:
      $usa_twig_vars = [
        'id' => NULL,
        'front' => 'not_homepage',
        'nodetype' => NULL,
        'pagetype' => NULL,
        'datalayer_pagetype' => NULL,
        'meta_noindex' => NULL,
        'taxonomy_link_block' => NULL,
        'site_banners' => NULL,
      ];
      $node = \Drupal::routeMatch()->getParameter('node');
      $isFront = \Drupal::service('path.matcher')->isFrontPage();
      $noindex = FALSE;

      if (is_object($node) && method_exists($node, 'getFields')) {
        // usagov_taxonomy_links is a "system breadcrumb" block whose twig file will render
        // the taxonomy information for the dataLayer array. Here, we create a renderable
        // version of the block and save it as a variable that can be rendered within the
        // HTML <head> element in html.html.twig.
        //
        // The breadcrumb links aren't calculated until this block is actually rendered, so
        // we do NOT have an opportunity to save or process the links themselves into the
        // $variables array for html.html.twig to use.
        $breadcrumb_block = Block::load('usagov_taxonomy_links');
        $taxonomy_link_block = \Drupal::entityTypeManager()->getViewBuilder('block')->view($breadcrumb_block);
        $usa_twig_vars['taxonomy_link_block'] = $taxonomy_link_block;

        // Check if the page is not front page.
        if ($isFront == 1) {
          $isFront = 'homepage';
        }
        else {
          $isFront = 'not_homepage';
        }
        // Check node has all the four variables set which must not be null.
        $node_real_type = $node->getType();
        if ($node->id() != NULL && $node_real_type != NULL && $isFront != NULL) {
          // Check for a few special cases:
          $special_node_type = FALSE;
          // change "directory_record" to "federal_directory_record"
          if ($node_real_type == 'directory_record') {
            $special_node_type = 'federal_directory_record';
          }
          else {
            // Check for special nodes by path:
            switch ($node->toUrl()->toString()) {
              case '/agency-index':
              case '/es/indice-agencias':
                $special_node_type = 'federal_directory_index';
                $current_letter = \Drupal::request()->query->get('letter') ?: 'a';
                if ($current_letter != 'a') {
                  $noindex = TRUE;
                }
                break;

              case '/state-governments':
              case '/es/gobiernos-estatales':
                $special_node_type = 'state_directory_index';
                break;
            }
          }

          $nodetype = $special_node_type ?: $node_real_type;
          if ($nodetype == 'wizard_step') {
            $noindex = TRUE;
          }

          if (($node_real_type == 'directory_record') && $node->hasField('field_acronym')) {
            if ($acronym = $node->get('field_acronym')->value) {
              $usa_twig_vars['head_title'] = $variables['head_title'];
              $usa_twig_vars['head_title']['title'] = Markup::create(trim(strip_tags($variables['page']['#title'])) .
                  " (" . trim(strip_tags($acronym)) . ")");
            }
          }

          $state = \Drupal::state();

          // Cleanup vars.
          $usa_twig_vars['id'] = $node->id();
          $usa_twig_vars['front'] = $isFront;
          $usa_twig_vars['nodetype'] = $nodetype;
          $usa_twig_vars['pagetype'] = usa_twig_vars_get_page_type($node);
          $usa_twig_vars['datalayer_pagetype'] = $usa_twig_vars['pagetype'] == 'Standard Page' ? 'Content Page' : $usa_twig_vars['pagetype'];
          $usa_twig_vars['meta_description'] = usa_twig_vars_get_meta_description($node);
          $usa_twig_vars['meta_noindex'] = $noindex;
          $usa_twig_vars['site_banners'] = $state->get('site_banners');
          dump($state);
          unset($isFront);
        }
      }
    }
    foreach ($usa_twig_vars as $key => $value) {
      $variables[$key] = $value;
    }
  }
}

/**
 * To allow for the hiding of menu items with page type set to Standard Page- Nav Hidden.
 *
 */
function usa_twig_vars_preprocess_menu__sidebar_first(&$variables, $hook) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node) && method_exists($node, 'getFields')) {
    $variables['pagetype'] = usa_twig_vars_get_page_type($node);
  }
}

function usa_twig_vars_get_page_type(&$node) {
  $fields = $node->getFields();
  if (array_key_exists('field_page_type', $fields)
      && $fields['field_page_type'] != NULL
      && !empty($fields['field_page_type']->getValue())
      && $fields['field_page_type']->getValue()[0]['target_id'] != NULL) {
    $term_id = $fields['field_page_type']->getValue()[0]['target_id'];
    $term = Term::load($term_id);
    $page_type = $term ? $term->get('name')->value : '';
    return $page_type ?? 'content_page';
  }
}

/**
 * Get a string for the <meta description> tag, as entered in the CMS. Attempt
 * to get text from field_meta_description, and if that is absent or does not
 * contain text, from field_page_intro (which will be the more common case).
 *
 * @param [type] $node
 * @return string, NULL
 */
function usa_twig_vars_get_meta_description(&$node) {
  $fields = $node->getFields();
  foreach (['field_meta_description', 'field_page_intro'] as $field_name) {
    if (array_key_exists($field_name, $fields) && ($fields[$field_name] !== NULL) && $fields[$field_name]->value) {
      $value = trim($fields[$field_name]->value);
      if (strlen($value) > 0) {
        return $value;
      }
    }
  }
  return '';
}

/**
 * Remove field_page_intro content if field_hide_page_intro is set to TRUE.
 *
 * @param mixed $variables
 *   Self described.
 */
function usa_twig_vars_preprocess_field__node__field_page_intro(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  // Check if field_hide_page_intro is True
  // the set the value of the content to empty string
  // but the fields content exist.
  if (is_object($node) && method_exists($node, 'getFields')) {
    $fields = $node->getFields();
    if (array_key_exists('field_hide_page_intro', $fields) && ($fields['field_hide_page_intro'] != NULL)
        && !empty($fields['field_hide_page_intro']->getValue())
        && ($fields['field_hide_page_intro']->getValue()[0]['value'] != NULL)
        && ($fields['field_hide_page_intro']->getValue()[0]['value'] == TRUE)) {
      $variables['items'][0]['content']['#context']['value'] = '';
    }
  }
}

/**
 * Preprocess title for Federal Agency pages
 *
 */
function usa_twig_vars_preprocess_page_title(&$variables, $hook) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node) && method_exists($node, 'getFields')) {
    if (($node->getType() == 'directory_record') && $node->hasField('field_acronym')) {
      if ($acronym = $node->get('field_acronym')->value) {
        $variables['title_suffix']['#markup'] = '(' . $acronym . ')';
      }
    }
  }
}

/**
 * Add context to the federal_agencies view to allow us to show the current letter,
 * and add links to the "next" and "previous" letters.
 * Note that the _summary preprocess hook runs first (at least for this view) and
 * populates a static variable with the list of possible letters, which the
 * _list preprocess hook needs in order to figure out prev/next.
 */
function usa_twig_vars_preprocess_views_view_summary__federal_agencies(&$variables, $hook, $info) {
  $our_unique_name = 'usa_twig_vars_preprocess_view_federal_agencies';
  drupal_static_reset($our_unique_name);
  $shared = &drupal_static($our_unique_name);
  $shared = [];

  // Letters are the title_truncated in the rows of the view's "result."
  // At this point the current letter is available only via the Request object.
  // (The core view summary doesn't use the current letter, but we do.)
  $view = $variables['view'];
  $rows = $view->result;
  $letters = [];
  foreach ($rows as $row) {
    $letters[] = $row->title_truncated;
  }
  $current_letter = $view->getRequest()->query->get('letter') ?: 'a';
  $current_letter = mb_strtoupper($current_letter);
  $shared['current'] = $current_letter;

  // Figure out next and previous letters.
  $cur_idx = array_search($current_letter, $letters);
  $next_idx = $cur_idx + 1;
  $prev_idx = $cur_idx - 1;
  if ($next_idx > array_key_last($letters)) {
    $next_idx = array_key_first($letters);
  }
  if ($prev_idx < array_key_first($letters)) {
    $prev_idx = array_key_last($letters);
  }
  $shared['next'] = $letters[$next_idx];
  $shared['prev'] = $letters[$prev_idx];

  $variables['alpha_context'] = $shared;
}

/**
 * Modify output of menu item level (Hierarchy level) to be human readable.
 */
function usa_twig_vars_preprocess_views_view_field__published_pages_report(&$variables, $hook, $info) {
  if ($variables['field']->field == 'level' ?? FALSE) {
    if (empty($variables['output'])) {
      $variables['output'] = 1;
    }
    else {
      $output = $variables['field']->getValue($variables['row']);
      $variables['output'] = (int) $output + 2;
    }
  }
}

/**
 * Add context to the federal_agencies view to allow us to show the current letter,
 * and add links to the "next" and "previous" letters.
 */
function usa_twig_vars_preprocess_views_view_list__federal_agencies(&$variables, $hook, $info) {
  $alpha_context = &drupal_static('usa_twig_vars_preprocess_view_federal_agencies');
  $variables['alpha_context'] = $alpha_context;
}


// function usa_twig_vars_entity_presave($entity) {

//   dump($entity->getType());
//   throw new Exception('Error saving node: Title cannot be empty');
//   // if ($entity->bundle() == "uswds_alert"){
//   //   dump($entity->bundle() == "uswds_alert");
//   //   throw new Exception('Error saving node: Title cannot be empty');
//   // }

// }


// function usa_twig_vars_entity_presave($entity) {

//   dump($entity->getEntityTypeId() == 'paragraph' && $entity->getType() == 'uswds_alert');
//   //throw new Exception('Error saving node: Title cannot be empty');

//   // if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'article') {
//   //   $entity->title->value = $entity->title->value . 'by ' . date('d-m-Y');
//   // }
// }

function usa_twig_vars_entity_presave($entity) {
  // dump($entity->getEntityTypeId() == 'paragraph' && $entity->getType() == 'uswds_alert');
  $state = \Drupal::state();
  $state->set('site_banners', []);

  // Check if we are in the `header_top` region
  if ($entity->getEntityTypeId() == 'paragraph' && $entity->getType() == 'uswds_alert') {

    $site_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // Get all site_banners from the website
    $site_banners_blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['type' => 'site_banner']);
    if ($site_banners_blocks) {

      foreach ($site_banners_blocks as $site_banner) {

        /**
         * Check if the language of the banner is the same as the website.
         * This prevents incorrect language banners from being displayed on the site.
         * */
        $site_banner_lang = $site_banner->langcode->value;
        if ($site_banner_lang === $site_language) {
          // Get the value of the checkbox in the site_banner form
          $place_above_header = $site_banner->field_place_above_header->value;

          // Check if the checkbox in the site_banner form is checked or not.
          if ($place_above_header) {
            // Set the value to the site_banner id to add the site_banner to the `header_top` region.
            $state->set('site_banners.' . $site_banner->id(), $site_banner->id());

            // Clear the cache only if the block is not placed in the region and the "Place above header" checkbox is selected.
            if (!$state->get('site_banners_placement.' . $site_banner->id(), FALSE)) {
              $state->set('site_banners_placement.' . $site_banner->id(), TRUE);
              // drupal_flush_all_caches();
            }

          }
          else {
            // Set the value to null to remove the site_banner with id `$site_banner->id()` from the region `header_top`
            $state->set('site_banners.' . $site_banner->id(), NULL);
            $state->set('site_banners_placement.' . $site_banner->id(), FALSE);
          }

          dump($state);
          throw new Exception('Error saving node: Title cannot be empty');
        }

      }

    }

  }

  // throw new Exception('Error saving node: Title cannot be empty');
}

// function usa_twig_vars_entity_insert($entity) {
//   dump($entity);
//   throw new Exception('Error saving node: Title cannot be empty');
// }

/**
 * Create an array called `site_banners` that contains all the site banners. The
 * value of each element in this array can be the id of the site banner if the
 * checkbox `place_above_header` is checked or `null` if the checkbox is not checked.
 */
// function usa_twig_vars_preprocess_region(&$variables) {

//   $state = \Drupal::state();

//   // Check if we are in the `header_top` region
//   if ($variables['region'] === 'header_top') {

//     $site_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
//     // Get all site_banners from the website
//     $site_banners_blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['type' => 'site_banner']);
//     if ($site_banners_blocks) {

//       foreach ($site_banners_blocks as $site_banner) {
//         /**
//          * Check if the language of the banner is the same as the website.
//          * This prevents incorrect language banners from being displayed on the site.
//          * */
//         $site_banner_lang = $site_banner->langcode->value;
//         if ($site_banner_lang === $site_language) {
//           // Get the value of the checkbox in the site_banner form
//           $place_above_header = $site_banner->field_place_above_header->value;

//           // Check if the checkbox in the site_banner form is checked or not.
//           if ($place_above_header) {
//             // Set the value to the site_banner id to add the site_banner to the `header_top` region.
//             $variables['site_banners'][$site_banner->id()] = $site_banner->id();

//             // Clear the cache only if the block is not placed in the region and the "Place above header" checkbox is selected.
//             if (!$state->get('site_banners_placement.' . $site_banner->id(), FALSE)) {
//               $state->set('site_banners_placement.' . $site_banner->id(), TRUE);
//               drupal_flush_all_caches();
//             }

//           }
//           else {
//             // Set the value to null to remove the site_banner with id `$site_banner->id()` from the region `header_top`
//             $variables['site_banners'][$site_banner->id()] = NULL;
//             $state->set('site_banners_placement.' . $site_banner->id(), FALSE);
//           }

//         }

//       }
//     }
//   }
// }

/**
 * Implements hook_form_alter().
 */
function usa_twig_vars_form_alter(&$form, &$form_state, $form_id) {
  if (is_array($form)) {
    $form['#after_build'][] = 'usa_twig_vars_after_build';
  }
}

/**
 * Custom after build function
 */
function usa_twig_vars_after_build($form, &$form_state) {
  // Unchecks Generate automatic URL alias if path exists, if NOT home page
  //in_array returns true unless strict mode is turned on but strict mode returns false on other pages where the key is found
  if (array_key_exists('field_page_type', $form_state->getValues())) {
    $page_type = NULL;
    if (is_array($form_state->getValues()['field_page_type'])) {
      $page_type = $form_state->getValues()['field_page_type'][0];
    }
    else {
      $page_type = $form_state->getValues()['field_page_type'];
    }
    if ($page_type == "22") {
      return $form;
    }
  }
  if (in_array($form['#id'], [
    'node-basic-page-form', 'node-basic-page-edit-form',
  ])) {
    $form['path']['widget'][0]['#open'] = TRUE;
    if (array_key_exists('path', $form)) {
      $form['path']['widget'][0]['pathauto']['#checked'] = FALSE;
      $form['path']['widget'][0]['alias']['#required'] = TRUE;
    }
  }
  return $form;
}

/** Helper function to check if node should be excluded from contact center based on path. Updates the exclude from url checkbox on edit pages.  */
function usa_twig_vars_check_exclude_from_contact_center($node_to_check) {
  $path_alias_to_check = $node_to_check->toUrl()->toString();
  if (str_starts_with($path_alias_to_check, '/es/articulos/') || str_starts_with($path_alias_to_check, '/features/')) {
    $node_to_check->set('field_exclude_from_contact_cente', 1);
    $node_to_check->save();
  }
}

/** Helper function to get the node from a path. Used in path_alias_insert and path_alias_update.  */
function usa_twig_vars_get_node_from_path($path) {
  $path_alias_url = $path->getAlias();
  $params = Url::fromUserInput($path_alias_url)->getRouteParameters();
  $entity_type_id = array_key_first($params);
  $node = \Drupal::entityTypeManager()->getStorage($entity_type_id)->load($params[$entity_type_id]);
  return $node;
}

/**
 * Implements hook_views_post_execute()
 * When a user goes to this view it will call usa_twig_vars_check_exclude_from_contact_center() on all the nodes to check the box for all features to the exclude from contact center
 */
function usa_twig_vars_views_post_execute($view) {
  if ($view->id() == 'features' && ($view->current_display == 'all_paths')) {
    $new_result = $view->result;
    $num_results = count($new_result);

    for ($res = 0; $res < $num_results; $res++) {
      $nid = $new_result[$res]->_entity->nid[0]->value;
      $node = Node::load($nid);
      usa_twig_vars_check_exclude_from_contact_center($node);
    }
  }
}

/**
 * Implements hook_path_alias_update()
 * When a user edits the url alias of a content page this is triggered to see if the node should be excluded from the contact center. If so the value of the exclude from contact center is set to 1.
 */
function usa_twig_vars_path_alias_update(PathAliasInterface $path) {
  $node = usa_twig_vars_get_node_from_path($path);
  usa_twig_vars_check_exclude_from_contact_center($node);
}

/**
 * Implements hook_node_insert()
 * When a user creates a new content page this is triggered to see if the node should be excluded from the contact center. If so the value of the exclude from contact center is set to 1.
 */
function usa_twig_vars_node_insert(NodeInterface $node_to_check) {
  usa_twig_vars_check_exclude_from_contact_center($node_to_check);
}
