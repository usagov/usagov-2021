<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\usagov_benefit_category_search\Form\BenefitCategorySearchForm;
use Drupal\views\ViewExecutable;

/**
 * Alters basic page forms to add our custom validators.
 */
function usagov_benefit_category_search_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  if ($form_id === 'node_basic_page_edit_form' || $form_id === 'node_basic_page_form') {
    $form['#validate'][] = 'usagov_benefit_category_search__validate_basic_page';
  }
}

/**
 * Runs custom validations on basic page forms for some page types.
 */
function usagov_benefit_category_search__validate_basic_page($form, FormStateInterface $form_state): void {
  $page_type_id = $form_state->getValue('field_page_type');
  if (!$page_type_id) {
    return;
  }
  $term = Term::load($page_type_id[0]['target_id']);

  switch ($term?->getName()) {
    case 'Standard Page':
      usagov_benefit_category_search_validate_standard_page($form_state);
      break;

    case 'Benefits Category Search':
      usagov_benefit_category_search_validate_category_search_page($form_state);
      break;
  }
}

/**
 * Validates categories selected on a standard page match page's language.
 */
function usagov_benefit_category_search_validate_standard_page(FormStateInterface &$form_state): void {
  $langcode = $form_state->getValue("langcode")[0]['value'];
  $refs = $form_state->getValue('field_benefits_category');
  $term_ids = array_map(fn($term) => $term['target_id'], $refs);
  // Keep terms that don't match selected language.
  $terms = Term::loadMultiple($term_ids);
  $otherCategories = array_filter($terms, fn(Term $term) => $term->language()->getId() !== $langcode);
  $count = count($otherCategories);
  if ($count > 0) {
    $summary = $count . ' benefits categor' . ($count > 1 ? 'ies' : 'y');
    $names = array_map(fn(Term $category) => '<li>' . $category->getName() . '</li>', $otherCategories);
    $detail = '<ul>' . implode('', $names) . '</ul>';
    $message = Markup::create("You have selected {$summary} from a different language as this page. {$detail}");
    $form_state->setErrorByName('field_benefits_category', $message);
  }
}

/**
 * Validates the IDs on Benefits Search Pages
 */
function usagov_benefit_category_search_validate_category_search_page(FormStateInterface &$form_state): void {
  $life_event_id = trim($form_state->getValue('field_benefits_life_events_id')[0]['value']);
  if (0 === preg_match('/^[A-Za-z0-9\-]+$/', $life_event_id)) {
    $form_state->setErrorByName('field_benefits_life_events_id', 'Life Events ID must only use letters, numbers, and minus (-) characters');
  }

  $search_id = trim($form_state->getValue('field_benefits_search_id')[0]['value']);
  if (0 === preg_match('/^[A-Za-z0-9\-]+$/', $search_id)) {
    $form_state->setErrorByName('field_benefits_search_id', 'Category Search ID must only use letters, numbers, and minus (-) characters');
  }

  if ($life_event_id === $search_id) {
    $form_state->setErrorByName('field_benefits_life_events_id', 'Life Events and Category Search IDs can not be identical');
    $form_state->setErrorByName('field_benefits_search_id', 'Life Events and Category Search IDs can not be identical');
  }
}

function usagov_benefit_category_search_form_taxonomy_term_benefits_category_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'usagov_benefit_category_search/lifeEventRefLanguageFilter';
  $form['#validate'][] = 'usagov_benefit_category_search__validate_basic_category';
}

function usagov_benefit_category_search__validate_basic_category($form, FormStateInterface $form_state) {
  $langcode = $form_state->getValue("langcode")[0]['value'];
  $events = $form_state->getValue('field_category_life_events');
  // get all the reference nodes in one call
  $nids = array_map(fn($event) => $event['target_id'], $events);
  $lifeEvents = Node::loadMultiple($nids);
  // keep nodes that don't match our selected language
  $otherLangs = array_filter($lifeEvents, fn(Node $lifeEvent) => $lifeEvent->language()->getId() !== $langcode);
  $count = count($otherLangs);
  if ($count > 0) {
    $summary = $count . ' life event' . ($count > 1 ? 's' : '');
    $names = array_map(fn(Node $lifeEvent) => '<li>' . $lifeEvent->getTitle() . '</li>', $otherLangs);
    $detail = '<ul>' . implode('', $names) . '</ul>';
    $message = Markup::create("You have {$summary} from a different language as this term. {$detail}");
    $form_state->setErrorByName('field_category_life_events', $message);
  }
}

function usagov_benefit_category_search_preprocess_node(&$vars) {
  // off by default
  $vars['usagov_show_benefits_landing_block'] = FALSE;
  // check we're viewing a full page
  if ($vars['page'] === TRUE && $vars['view_mode'] === 'full' && $vars['node']->getType() === 'basic_page') {
    // even if enabled, only show the block if there's a title and description for the homepage block
    if (\Drupal::service('path.matcher')->isFrontPage()
      && $vars["node"]->field_homepage_benefits_title->value
      && $vars["node"]->field_homepage_benefits_descr->value
    ) {
      $vars['usagov_show_benefits_landing_block'] = BenefitCategorySearchForm::showLandingPageBlock();
    }
    // even if enabled, only show the block if there's a description on navigation cards page
    elseif (
      $vars["node"]->field_page_type->referencedEntities()[0]->getName() === 'Navigation Cards Page'
      && $vars["node"]->field_benefits_callout_descr->value
    ) {
      $vars['usagov_show_benefits_landing_block'] = BenefitCategorySearchForm::showLandingPageBlock();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function usagov_benefit_category_search_views_pre_render(ViewExecutable $view) {
  if ($view->storage->getOriginalId() === 'benefit_search_results') {
    // Here, we're safeguarding against showing a category term that is from
    // a different language than the one requested via the views context/arguments

    // First, for filtering, remove categories that are not in the language we want
    foreach ($view->result as $row) {
      $categories = $row->_entity->field_benefits_category;

      foreach ($categories as $category) {
        $termID = $category->get('target_id')->getValue();
        if ($term = Term::load($termID)) {
          if ($term->language()->getId() !== $view->argument["langcode"]->argument) {
            // removing an item re-keys the internal array, but we can use the name
            // property for a list item, which tracks the index after re-keying.
            $categories->removeItem($category->getName());
          }
        }
      }
    }

    // Next, remove terms from other languages for the categories we show in
    // the search results.
    foreach ($view->field['term_node_tid']->items as $src => $terms) {
      foreach ($terms as $termID => $values) {
        if ($term = Term::load($termID)) {
          if ($term->language()->getId() !== $view->argument["langcode"]->argument) {
            unset($view->field['term_node_tid']->items[$src][$termID]);
          }
        }
      }
    }
  }
}
