<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\usagov_benefit_category_search\Form\BenefitCategorySearchForm;
use Drupal\views\ViewExecutable;

function usagov_benefit_category_search_form_taxonomy_term_benefits_category_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['#attached']['library'][] = 'usagov_benefit_category_search/lifeEventRefLanguageFilter';
  $form['#validate'][] = 'usagov_benefit_category_search__validate_basic_category';
}

function usagov_benefit_category_search__validate_basic_category($form, FormStateInterface $form_state) {
  $x = 1;
  $langcode = $form_state->getValue("langcode")[0]['value'];
  $events = $form_state->getValue('field_category_life_events');

  $nids = array_map(fn($event) => $event['target_id'], $events);
  $lifeEvents = Node::loadMultiple($nids);

  $x = 1;

}
function usagov_benefit_category_search_preprocess_node(&$vars) {
  // off by default
  $vars['usagov_show_benefits_landing_block'] = FALSE;
  // check we're viewing a full page
  if ($vars['page'] === TRUE && $vars['view_mode'] === 'full' && $vars['node']->getType() === 'basic_page') {
    // even if enabled, only show the block if there's a title and description for the homepage block
    if (\Drupal::service('path.matcher')->isFrontPage()
      && $vars["node"]->field_homepage_benefits_title->value
      && $vars["node"]->field_homepage_benefits_descr->value
    ) {
      $vars['usagov_show_benefits_landing_block'] = BenefitCategorySearchForm::showLandingPageBlock();
    }
    // even if enabled, only show the block if there's a description on navigation cards page
    elseif (
      $vars["node"]->field_page_type->referencedEntities()[0]->getName() === 'Navigation Cards Page'
      && $vars["node"]->field_benefits_callout_descr->value
    ) {
      $vars['usagov_show_benefits_landing_block'] = BenefitCategorySearchForm::showLandingPageBlock();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function usagov_benefit_category_search_views_pre_render(ViewExecutable $view) {
  if ($view->storage->getOriginalId() === 'benefit_search_results') {
    // Here, we're safeguarding against showing a category term that is from
    // a different language than the one requested via the views context/arguments

    // First, for filtering, remove categories that are not in the language we want
    foreach ($view->result as $row) {
      $categories = $row->_entity->field_benefits_category;

      foreach ($categories as $category) {
        $termID = $category->get('target_id')->getValue();
        if ($term = Term::load($termID)) {
          if ($term->language()->getId() !== $view->argument["langcode"]->argument) {
            // removing an item re-keys the internal array, but we can use the name
            // property for a list item, which tracks the index after re-keying.
            $categories->removeItem($category->getName());
          }
        }
      }
    }

    // Next, remove terms from other languages for the categories we show in
    // the search results.
    foreach ($view->field['term_node_tid']->items as $src => $terms) {
      foreach ($terms as $termID => $values) {
        if ($term = Term::load($termID)) {
          if ($term->language()->getId() !== $view->argument["langcode"]->argument) {
            unset($view->field['term_node_tid']->items[$src][$termID]);
          }
        }
      }
    }
  }
}
