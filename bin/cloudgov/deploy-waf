#!/usr/bin/env bash
set -euo pipefail

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi

DOCKERUSER=${DOCKERUSER:-dnark}
DOCKERREPO=${DOCKERREPO:-usagov-2021}
CTAG=${1:-latest}
CDIGEST=${2:-}


SPACE=$( cf target | grep space: | awk '{ print $2 }')

# The Image digest for this tag should be looked up from cloud.gov storage
# Any tag with a stored Image digest should be referenced by hash instead of tag

# Need to create 'external-domain' service for custom routes: *.usa.gov
# cf delete-service dev-usagov-domain
# cf create-service external-domain domain dev-usagov-domain -c '{"domains": "cms-dev.usa.gov,beta-dev.usa.gov"}'
# cf create-service external-domain domain-with-cdn stage-usagov-domain -c '{"domains": "cms-stage.usa.gov,beta-stage.usa.gov"}'
# cf create-service external-domain domain-with-cdn prod-www-usagov-domain -c '{"domains": "beta.usa.gov"}'
# cf create-service external-domain domain          prod-cms-usagov-domain -c '{"domains": "cms.usa.gov"}'
# cf service prod-cms-usagov-domain

if ! command -v jq >/dev/null; then
  printf "\nMust have JQ installed\n"
  exit 1
fi

if [ -z "${ROUTE_SERVICE_APP_NAME+set}" ]; then
  printf "\nMust set ROUTE_SERVICE_APP_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ -z "${ROUTE_SERVICE_NAME+set}" ]; then
  printf "\nMust set ROUTE_SERVICE_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ -z "${PROTECTED_APP_NAME+set}" ]; then
  printf "\nMust set PROTECTED_APP_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ "${ENV_ANY_NOT_SET+set}" ]; then

  printf "\nExample:\n"
  printf "\tROUTE_SERVICE_APP_NAME=waf ROUTE_SERVICE_NAME=waf-route-$SPACE-usagov PROTECTED_APP_NAME=cms ${0} ${CTAG} ${CDIGEST}\n"
  exit 1
fi

APPS_DOMAIN=$(cf curl "/v3/domains" | jq -r '[.resources[] | select(.name|endswith("usa.gov"))][0].name')
ROUTE_DOMAIN=$(cf curl "/v3/domains" | jq -r '[.resources[] | select(.name|endswith("app.cloud.gov"))][0].name')

printf "\nFetching APPS_DOMAIN\n"
printf "\tAPPS_DOMAIN: $APPS_DOMAIN\n"

printf "\nFetching ROUTE_DOMAIN\n"
printf "\tAPPS_DOMAIN: $ROUTE_DOMAIN\n"

# remove proxy
cf set-env waf http_proxy  ""
cf set-env waf https_proxy ""
cf set-env waf HTTPS_PROXY ""
cf set-env waf HTTP_PROXY ""

# launch the app
if [ -z "$CDIGEST" ]; then
  echo "Deploying ${DOCKERUSER}/${DOCKERREPO}:waf-${CTAG}"
  cf push "${ROUTE_SERVICE_APP_NAME}" --no-start \
    --var app-name="${ROUTE_SERVICE_APP_NAME}" \
    --docker-image ${DOCKERUSER}/${DOCKERREPO}:waf-${CTAG}
else
  echo "Deploying ${DOCKERUSER}/${DOCKERREPO} waf-${CTAG} via digest ${CDIGEST}"
  cf push "${ROUTE_SERVICE_APP_NAME}" --no-start \
    --var app-name="${ROUTE_SERVICE_APP_NAME}" \
    --docker-image ${DOCKERUSER}/${DOCKERREPO}${CDIGEST}
fi

cf create-route app.cloud.gov --hostname $ROUTE_SERVICE_NAME
cf map-route "$ROUTE_SERVICE_APP_NAME" app.cloud.gov --hostname $ROUTE_SERVICE_NAME

cf set-env "${ROUTE_SERVICE_APP_NAME}" ALLOWED_IPS "$(printf "%s" "${NGINX_ALLOW_STATEMENTS:-}")"
cf start "${ROUTE_SERVICE_APP_NAME}"

printf "\nFetching GUIDs for protected-app & route-service-app\n"

PROTECTED_APP_GUID="$(cf app ${PROTECTED_APP_NAME} --guid)"
ROUTE_SERVICE_APP_GUID="$(cf app ${ROUTE_SERVICE_APP_NAME} --guid)"

printf "\tprotected-app (${PROTECTED_APP_NAME}): ${PROTECTED_APP_GUID}\n"
printf "\troute-service-app (${ROUTE_SERVICE_APP_NAME}): ${ROUTE_SERVICE_APP_GUID}\n"

ROUTE_SERVICE_DOMAIN="$(cf curl "/v3/apps/$(cf app "${ROUTE_SERVICE_APP_NAME}" --guid)/routes" | jq -r --arg ROUTE_DOMAIN "${ROUTE_DOMAIN}" '[.resources[] | select(.url | endswith($ROUTE_DOMAIN))][0].url')"

printf "\nFetching route-service-domain\n"
printf "\troute-service-domain: $ROUTE_SERVICE_DOMAIN\n"

if cf curl "/v3/service_instances?type=user-provided&names=${ROUTE_SERVICE_NAME}" | jq -e '.pagination.total_results == 0' > /dev/null; then

  printf "\nCreating route-service\n"

  cf create-user-provided-service \
    "${ROUTE_SERVICE_NAME}" \
    -r "https://${ROUTE_SERVICE_DOMAIN}";cf
else
  printf "\nUpdating route-service\n"

  cf update-user-provided-service \
    "${ROUTE_SERVICE_NAME}" \
    -r "https://${ROUTE_SERVICE_DOMAIN}";
fi

printf "\nBindng [ ${PROTECTED_APP_NAME} ] routes to [ ${ROUTE_SERVICE_NAME} ]\n"

HOST_NAMES=($(cf curl "/v3/apps/$PROTECTED_APP_GUID/routes" | jq -r --arg APPS_DOMAIN "${APPS_DOMAIN}" '[.resources[] | select(.url | endswith($APPS_DOMAIN))][].host'))

for url in "${HOST_NAMES[@]}"; do
  echo "\nBinding ${url}.${APPS_DOMAIN} to ${ROUTE_SERVICE_NAME}\n"
  cf bind-route-service "${APPS_DOMAIN}" "${ROUTE_SERVICE_NAME}" --hostname "${url}";
  if [ $(echo "$url" | grep 'cms') ]; then
    cf set-env waf CMS_HOST "$url"
  elif [ $(echo "$url" | grep 'beta') ]; then
    cf set-env waf WWW_HOST "$url"
  fi
done

cf add-network-policy waf cms -s $SPACE -o gsa-tts-usagov  --protocol tcp --port 443
cf add-network-policy waf cms -s $SPACE -o gsa-tts-usagov  --protocol tcp --port 80
cf add-network-policy waf cms -s $SPACE -o gsa-tts-usagov  --protocol tcp --port 61443

#$SCRIPT_DIR/setup-egress-for-apps waf
