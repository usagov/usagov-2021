#!/usr/bin/env bash
set -euo pipefail

if ! command -v jq >/dev/null; then
  printf "\nMust have JQ installed\n"
  exit 1
fi

if [ -z "${ROUTE_SERVICE_APP_NAME+set}" ]; then
  printf "\nMust set ROUTE_SERVICE_APP_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ -z "${ROUTE_SERVICE_NAME+set}" ]; then
  printf "\nMust set ROUTE_SERVICE_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ -z "${PROTECTED_APP_NAME+set}" ]; then
  printf "\nMust set PROTECTED_APP_NAME environment variable\n"
  ENV_ANY_NOT_SET=1
fi

if [ "${ENV_ANY_NOT_SET+set}" ]; then

  printf "\nExample:\n"
  printf "\tROUTE_SERVICE_APP_NAME=waf-route-app ROUTE_SERVICE_NAME=waf-route PROTECTED_APP_NAME=cms ${0}\n"
  exit 1
fi

APPS_DOMAIN=$(cf curl "/v3/domains" | jq -r '[.resources[] | select(.name|endswith("app.cloud.gov"))][0].name')

printf "\nFetching APPS_DOMAIN\n"
printf "\tAPPS_DOMAIN: $APPS_DOMAIN\n"

cf push "${ROUTE_SERVICE_APP_NAME}" --no-start --var app-name="${ROUTE_SERVICE_APP_NAME}"
cf set-env "${ROUTE_SERVICE_APP_NAME}" ALLOWED_IPS "$(printf "%s" "${NGINX_ALLOW_STATEMENTS}")"
cf start "${ROUTE_SERVICE_APP_NAME}"

printf "\nFetching GUIDs for protected-app & route-service-app\n"

PROTECTED_APP_GUID="$(cf app ${PROTECTED_APP_NAME} --guid)"
ROUTE_SERVICE_APP_GUID="$(cf app ${ROUTE_SERVICE_APP_NAME} --guid)"

printf "\tprotected-app (${PROTECTED_APP_NAME}): ${PROTECTED_APP_GUID}\n"
printf "\troute-service-app (${ROUTE_SERVICE_APP_NAME}): ${ROUTE_SERVICE_APP_GUID}\n"

ROUTE_SERVICE_DOMAIN="$(cf curl "/v3/apps/$(cf app "${ROUTE_SERVICE_APP_NAME}" --guid)/routes" | jq -r --arg APPS_DOMAIN "${APPS_DOMAIN}" '[.resources[] | select(.url | endswith($APPS_DOMAIN))][0].url')"

printf "\nFetching route-service-domain\n"
printf "\troute-service-domain: $ROUTE_SERVICE_DOMAIN\n"

if cf curl "/v3/service_instances?type=user-provided&names=${ROUTE_SERVICE_NAME}" | jq -e '.pagination.total_results == 0' > /dev/null; then

  printf "\nCreating route-service\n"

  cf create-user-provided-service \
    "${ROUTE_SERVICE_NAME}" \
    -r "https://${ROUTE_SERVICE_DOMAIN}";
else
  printf "\nUpdating route-service\n"

  cf update-user-provided-service \
    "${ROUTE_SERVICE_NAME}" \
    -r "https://${ROUTE_SERVICE_DOMAIN}";
fi

printf "\nBindng [ ${PROTECTED_APP_NAME} ] routes to [${ROUTE_SERVICE_NAME}]\n"

HOST_NAMES=($(cf curl "/v3/apps/$PROTECTED_APP_GUID/routes" | jq -r --arg APPS_DOMAIN "${APPS_DOMAIN}" '[.resources[] | select(.url | endswith($APPS_DOMAIN))][].host'))

for url in "${HOST_NAMES[@]}"; do
  cf bind-route-service "${APPS_DOMAIN}" "${ROUTE_SERVICE_NAME}" --hostname "${url}";
done
