#!/usr/bin/env bash
#
# This script will attempt to deploy an ssc app by tag
#

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi

DOCKERUSER=${DOCKERUSER:-gsatts}
DOCKERREPO=${DOCKERREPO:-usagov-2021}
STAG=${1:-latest}
SDIGEST=${2:-}

APP_SPACE=$( cf target | grep space: | awk '{ print $2 }')
APP_ORG=$(   cf target | grep org:   | awk '{ print $2 }')

# The Image digest for this tag should be looked up from cloud.gov storage
# Any tag with a stored Image digest should be referenced by hash instead of tag

function appExists {  # appname
  app=$1
  if [ -z "$app" ]; then
    echo "ERROR: appname is required"
    exit 1
  fi
  echo cf app $app > /dev/null 2>&1
  cf app $app > /dev/null 2>&1
  return $?
}

function restartApp { #appname
  app=$1
  if [ -z "$app" ]; then
    echo "ERROR: appname is required"
    exit 1
  fi
  cf restart $app --no-wait --strategy rolling
}

function pushApp { #appname
  app=$1
  if [ -z "$app" ]; then
    echo "ERROR: appname is required"
    exit 1
  fi

  instances="-i 1"
  if [ "$APP_SPACE" == "prod" ]; then
    instances="-i 2"
  elif [ "$APP_SPACE" == "stage" ]; then
    instances="-i 1"
  elif [ "$APP_SPACE" == "dev" ]; then
    instances="-i 1"
  fi

  if [ -z "$SDIGEST" ]; then
    echo "Deploying ${DOCKERUSER}/${DOCKERREPO}:${app}-${STAG}"
    cf push $app $instances --docker-image ${DOCKERUSER}/${DOCKERREPO}:${app}-${STAG}
  else
    echo "Deploying ${DOCKERUSER}/${DOCKERREPO} ${app}-${STAG} via digest ${SDIGEST}"
    cf push $app $instances --docker-image ${DOCKERUSER}/${DOCKERREPO}${SDIGEST}
  fi
}

function setupRoutes { #appname
  app=$1
  if [ -z "$app" ]; then
    echo "ERROR: appname is required"
    exit 1
  fi
  # the egress-setup doesn't interfere with bootstrapping
  # but cms needs to exist in the first place
  # for route mapping and egress setup to run

  if [ "$APP_SPACE" == "dev-dr" ]; then
    cf create-route apps.internal --hostname dev-dr-usagov
    cf map-route $app apps.internal --hostname dev-dr-usagov
    cf create-route usa.gov --hostname dev-dr
    cf map-route $app usa.gov --hostname dev-dr

  else
    cf create-route apps.internal --hostname beta-$APP_SPACE-usagov
    cf map-route $app apps.internal --hostname beta-$APP_SPACE-usagov

    if [ "$APP_SPACE" == "prod" ]; then
      cf create-route apps.internal --hostname www-$APP_SPACE-usagov
      cf  map-route $app apps.internal --hostname www-$APP_SPACE-usagov
      cf create-route usa.gov --hostname beta
      cf map-route $app usa.gov --hostname beta
      cf create-route usa.gov --hostname www
      cf map-route $app usa.gov --hostname www

    else
      cf create-route usa.gov --hostname beta-$APP_SPACE
      cf map-route $app usa.gov --hostname beta-$APP_SPACE
    fi

  fi
}

function setupEgress { #appname
  app=$1
  if [ -z "$app" ]; then
    echo "ERROR: appname is required"
    exit 1
  fi
  $SCRIPT_DIR/setup-egress-for-apps $app --no-restart
}

if appExists www; then
  setupRoutes www
  setupEgress www
  pushApp www
else
  cf set-env www SKIP_DRUPAL_BOOTSTRAP "skip"
  pushApp www
  setupRoutes www
  setupEgress www
  cf set-env www SKIP_DRUPAL_BOOTSTRAP ""
  restartApp www
fi
