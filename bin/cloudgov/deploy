#!/bin/sh
#
# This script will attempt to create the services required
# and then launch everything.
#

CONTAINER=ednark/usagov-2021
CONTAINERTAG=${1:-latest}

# this function will generate a random string, or bail if uuidgen is not available.
generate_string()
{
  if [ -z "$1" ] ; then
    if command -v uuidgen >/dev/null ; then
      NEW_STRING=$(uuidgen)
      export NEW_STRING
    else
      echo "cannot find uuidgen utility:  You will need to generate some random strings and put them in the CRON_KEY, HASH_SALT, and ROOT_USER_PASS environment variables, then re-run this script."
      exit 1
    fi
  fi
}

# If the user does not supply required data, generate some secrets.
generate_string "$CRON_KEY"
CRON_KEY=${CRON_KEY:-$NEW_STRING}

generate_string "$HASH_SALT"
HASH_SALT=${HASH_SALT:-$NEW_STRING}

generate_string "$ROOT_USER_PASS"
ROOT_USER_PASS=${ROOT_USER_PASS:-$NEW_STRING}

ROOT_USER_NAME=${ROOT_USER_NAME:-root}


# function to check if a service exists
service_exists()
{
  cf service "$1" >/dev/null 2>&1
}

# create services (if needed)
if service_exists "database" ; then
  echo database already created
else
  #if [ "$SPACE" = "prod" ] ; then
  #  cf create-service aws-rds medium-mysql database
  #else
    cf create-service aws-rds \
      small-mysql \
      database \
      -c '{"version": "8.0"}'
  #fi
fi

if service_exists "secrets" ; then
  echo secrets already created
else
  yes '' | cf create-user-provided-service secrets -p "{\"CRON_KEY\": \"$CRON_KEY\", \"HASH_SALT\": \"$HASH_SALT\", \"ROOT_USER_NAME\": \"$ROOT_USER_NAME\", \"ROOT_USER_PASS\": \"$ROOT_USER_PASS\"}"
fi

if service_exists "storage" ; then
  echo storage already created
else
  cf create-service s3 basic-sandbox storage
fi

# wait until the db is fully provisioned
until cf create-service-key database test-db-ok ; do
	echo waiting until database is live...
	sleep 20
done
cf delete-service-key database test-db-ok -f

DEPLOY_TARGET=$(cf target | grep space: | awk '{print $2}');
if [ "$DEPLOY_TARGET" = 'personal' ]; then
  cms_randomroute='--random-route'
  waf_randomroute='--random-route'
fi;

# launch the apps
cf push cms --docker-image $CONTAINER:cms-$CONTAINERTAG $cms_randomroute
cf push waf --docker-image $CONTAINER:waf-$CONTAINERTAG $waf_randomroute

# make sure that the app knows where it's s3fs stuff lives
cf create-service-key storage storagekey
S3INFO=$(cf service-key storage storagekey)
S3_BUCKET=$(echo "$S3INFO" | grep '"bucket":' | sed 's/.*"bucket": "\(.*\)",/\1/')
S3_REGION=$(echo "$S3INFO" | grep '"region":' | sed 's/.*"region": "\(.*\)",/\1/')
cf set-env cms S3_BUCKET "$S3_BUCKET"
cf set-env cms S3_REGION "$S3_REGION"
cf set-env waf S3_PROXY "$S3_BUCKET.s3-fips.$S3_REGION.amazonaws.com"
cf delete-service-key storage storagekey -f

# Assume WAF is setup as routing service already vi a specific waf app name
if [ "$DEPLOY_TARGET" = 'dev' ]; then
  # setup cms hostname
  if [[ $(cf check-route app.cloud.gov --hostname cms-dev-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname cms-dev-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname cms-dev-usagov
  cf bind-route-service "app.cloud.gov" waf-route-dev-usagov --hostname cms-dev-usagov
  # setup wwww hostname
  if [[ $(cf check-route app.cloud.gov --hostname beta-dev-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname beta-dev-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname beta-dev-usagov
  cf bind-route-service app.cloud.gov waf-route-dev-usagov --hostname beta-dev-usagov
fi;
if [ "$DEPLOY_TARGET" = 'stage' ]; then
  # setup cms hostname
  if [[ $(cf check-route app.cloud.gov --hostname cms-stage-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname cms-stage-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname cms-stage-usagov
  cf bind-route-service app.cloud.gov waf-route-stage-usagov --hostname cms-stage-usagov
  # setup wwww hostname
  if [[ $(cf check-route app.cloud.gov --hostname beta-dev-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname beta-dev-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname beta-dev-usagov
  cf bind-route-service app.cloud.gov waf-route-dev-usagov --hostname beta-dev-usagov
fi;
if [ "$DEPLOY_TARGET" = 'prod' ]; then
  # setup cms hostname
  if [[ $(cf check-route app.cloud.gov --hostname cms-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname cms-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname cms-usagov
  cf bind-route-service app.cloud.gov waf-route-usagov --hostname cms-usagov
  # setup wwww hostname
  if [[ $(cf check-route app.cloud.gov --hostname beta-usagov) == *"does not exist."* ]]; then
    cf create-route app.cloud.gov --hostname beta-usagov
  fi;
  cf map-route cms app.cloud.gov --hostname beta-usagov
  cf bind-route-service app.cloud.gov waf-route-usagov --hostname beta-usagov
fi;


cf restart cms
cf restart waf

# # tell people where to go
# ROUTE=$(cf apps | grep web | awk '{print $6}')
# echo
# echo
# echo "  to log into the drupal site, you will want to go to https://${ROUTE}/user/login and get the username/password from the output of these commands:"
# echo "USERNAME:  cf e web | grep ROOT_USER_NAME | sed 's/.*: \"\(.*\)\".*/\1/'"
# echo "PASSWORD:  cf e web | grep ROOT_USER_PASS | sed 's/.*: \"\(.*\)\".*/\1/'"
# echo "  to get in.  Have fun!"
