#!/usr/bin/env bash

# Deploy services and app for cron app.  Service creation should be idempotent.

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$0")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi
if [ -f $SCRIPT_DIR/../deploy/includes ]; then
  . $SCRIPT_DIR/../deploy/includes
else
   echo Cannot find $SCRIPT_DIR/../deploy/includes
   exit 1
fi

# just testing?
if [ x$1 = x"--dryrun" ]; then
  export echo=echo
  shift
fi

SPACE=${1:-please-provide-space-name-as-first-argument}
SPACE=$(echo "$SPACE" | tr '[:upper:]' '[:lower:]')
assertCurSpace $SPACE
shift
ORG=$(getOrg)

STAG=${1:-latest}
SDIGEST=${2:-}

DOCKERUSER=${DOCKERUSER:-gsatts}
DOCKERREPO=${DOCKERREPO:-usagov-2021}

export APPNAME="cron"
export APPINSTANCES=1

if [ -z "$SDIGEST" ]; then
  echo "AppSpec: ${DOCKERUSER}/${DOCKERREPO}:${APPNAME}-${STAG}"
  APPSPEC="${DOCKERUSER}/${DOCKERREPO}:${APPNAME}-${STAG}"
else
  echo "AppSpec: ${DOCKERUSER}/${DOCKERREPO}${SDIGEST}"
  APPSPEC="${DOCKERUSER}/${DOCKERREPO}${SDIGEST}"
fi

function setHTTPProxy() {
    appSpace=$1
    appName=$2
    proxySet=$3
    proxySpace=$CF_EGRESS_SPACE
    proxyName="${SPACE}-proxy"
    if [ "$proxySet" = "1" ]; then
        echo "Setting http_proxy to $proxyName"
        cf target -s $proxySpace -o $CF_EGRESS_ORG > /dev/null 2>&1;
        proxyroute=$(cf env $proxyName | grep proxy_route | awk '{print $2}')
        if [ -z "$proxyroute" ]; then
            echo "ERROR: $proxyName does not have a proxy_route set"
            exit 1
        fi;
        cf target -s $appSpace -o $ORG > /dev/null 2>&1
        cf set-env $appName https_proxy $proxyroute
        cf set-env $appName HTTPS_PROXY $proxyroute
        cf set-env $appName http_proxy $proxyroute
        cf set-env $appName HTTP_PROXY $proxyroute
    elif [ "$proxySet" = "0" ]; then
        echo "Setting http_proxy to empty"
        cf target -s $appSpace -o $ORG > /dev/null 2>&1
        cf unset-env $appName https_proxy
        cf unset-env $appName HTTPS_PROXY
        cf unset-env $appName http_proxy
        cf unset-env $appName HTTP_PROXY
    fi;
}

# launch the app
echo "Deploying ${DOCKERUSER}/${DOCKERREPO}:${APPNAME}"

if existsCFService ${APPNAME}-service-account; then
  echo "User service ${APPNAME}-service-account already exists - good!"
else
  $SCRIPT_DIR/create-service-account $SPACE $APPNAME
fi

if existsCFService ${APPNAME}-service-account; then
  SERVICE_KEY=$(cf service-key ${APPNAME}-service-account ${APPNAME}-service-key | tail -n +3)
  SERVICE_USER=$( echo ${SERVICE_KEY} | jq -r '.credentials.username')
  $echo cf set-space-role ${SERVICE_USER} $ORG $SPACE SpaceAuditor
  $echo cf set-org-role ${SERVICE_USER} $ORG OrgAuditor
  $echo cf unset-space-role ${SERVICE_USER} $ORG $SPACE SpaceDeveloper
else
  echo could not create Service Account for ${APPNAME} in ${SPACE}
  exit 1
fi

STATE_STORAGE_SERVICE=${APPNAME}-state-storage
EVENT_STORAGE_SERVICE=${APPNAME}-event-storage
CALLWAIT_STORAGE_SERVICE=${APPNAME}-callwait-storage
for storage_service in $STATE_STORAGE_SERVICE $EVENT_STORAGE_SERVICE $CALLWAIT_STORAGE_SERVICE; do
  echo "Configuring $storage_service"
  if existsCFService $storage_service &> /dev/null; then
    echo "$storage_service already created"
  else
    if [ $storage_service = $CALLWAIT_STORAGE_SERVICE ]; then
      cf create-service s3 basic-public $storage_service
    else
      cf create-service s3 basic $storage_service
    fi
    if existsCFService $storage_service &> /dev/null; then
      echo "$storage_service successfully created"
    else
      echo "ERROR: $storage_service creation failed"
      exit 1
    fi
  fi
done

function cf_push() {
  appspec=$1
  instances=${2:-1} ### Always spawn a single app instance unless told otherwise
  if [ -z "$DOCKERHUB_ACCESS_TOKEN" ]; then
    cf push ${APPNAME} --docker-image ${appspec}
  else
    CF_DOCKER_PASSWORD=$DOCKERHUB_ACCESS_TOKEN cf push ${APPNAME} --docker-image ${appspec} --docker-username $DOCKERHUB_USERNAME
  fi
}

if existsCFApp ${APPNAME} ; then
  $SCRIPT_DIR/setup-egress-for-apps ${APPNAME}
  setHTTPProxy ${SPACE} ${APPNAME} 1
  cf_push $APPSPEC $APPINSTANCES
else
  cf_push $APPSPEC $APPINSTANCES
  setHTTPProxy ${SPACE} ${APPNAME} 1
  $SCRIPT_DIR/setup-egress-for-apps ${APPNAME}
fi
