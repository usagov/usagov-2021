#!/bin/bash

# TODO:
#   Set the username/password each time? Or retrieve existing?

set -e
set -o pipefail

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi


usage="
$0: (Re-)deploy egress proxy for an environment

Usage:
   $0 -h

Options:
-h:            show help and exit
egressspace:   space with public egress (default: <currentspace>-egress)
egressorg:     org where the public egress space is (default: <currentorg>)

If the environment variable DRYRUN is set, the planned commands will be echoed rather
than invoked. For example:
   DRYRUN=1 $0 somespace someorg

Requirements:
- You must be a SpaceDeveloper in the current space and the egress_space.

NOTES:
- Files <app>.<allow|deny>.acl will be created if they don't exist
- Any S3 buckets bound to an app will automatically be allowed for that app
- Your apps will be restarted in a rolling fashion to pick up variable changes
- Post-restart, just use the http_proxy variable when making egress connections!
"

if [[ "$1" == "-h" ]]; then
    echo "${usage}"
    exit 1
fi

# Grab the starting space and org where the command was run
startorg=$(   cf target | grep org:   | awk '{ print $2 }')
startspace=$( cf target | grep space: | awk '{ print $2 }')

egressspace=${1:-shared-egress}
egressorg=${2:-$startorg}

# Drop them off where we found them
function popspace() {
    echo "Popspace: ${startorg}/${startspace}"
    cf target -o "$startorg" -s "$startspace" > /dev/null 2>&1
}
# trap popspace exit
trap popspace err

# Try to switch to the egress org+space, error out if it's not there
cf target -o "$egressorg" -s "$egressspace" > /dev/null 2>&1 ||
    (echo "ERROR: Space ${egressorg}/${egressspace} is not available!" && exit 1)

echo "Using Egress Space ${egressorg}/${egressspace}"
# proxyname="proxy-$(echo "$startorg" | tr _. - )-$(echo "$startspace" | tr _. -)"
proxyname=""
if [ -z "$proxyname" ]; then
    egressapps=$(cf apps | tail -n +4 | awk '{print $1}')
    proxyname=$(echo "$egressapps" | grep -e "^${startspace}-proxy\b" | head -n 1 || echo "")
    if [ -z "$proxyname" ]; then
      proxyname=$(echo "$egressapps" | grep "^${startspace}-egress" | head -n 1 || echo "")
    fi
fi
if [ -z "$proxyname" ]; then
    proxyname="${startspace}-proxy"
fi
echo "Using egress proxy app: $proxyname"

popspace

# If DRYRUN is set, don't run the commands, but echo them.
if [ -n "${DRYRUN}" ]; then
    output="echo # "
fi

# setup only one egress app per space, and point both waf and cms towards it
echo "Gather Bucket names from App Space"
buckethosts=""
applist="cms waf"
for app in $applist ; do
    echo "Gathering buckets for $app"
    VCAP_SERVICES=$(cf env "$app" | sed -n -e "/VCAP_SERVICES/,\$p" | sed -e "/VCAP_APPLICATION:/,\$d" | sed 's/VCAP_SERVICES: //g' | jq -r )
    n=$(echo -E "$VCAP_SERVICES" | jq -r '.s3 | length')
    i=0
    while [ $i -lt "$n" ]
    do
        # Add attached buckets to the allow list
        BUCKET=$(            echo -E "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.bucket")
        AWS_ENDPOINT=$(      echo -E "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.endpoint" | uniq )
        AWS_ENDPOINT_ALT=$(  echo -E "$AWS_ENDPOINT"  | sed '/s3\-us\-/s3.us-/' | uniq )
        AWS_FIPS_ENDPOINT=$( echo -E "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.fips_endpoint" | uniq )
        # Add both the FIPS and non-FIPS hostnames
        buckethosts="$buckethosts ${BUCKET}.${AWS_ENDPOINT} ${BUCKET}.${AWS_ENDPOINT_ALT} ${BUCKET}.${AWS_FIPS_ENDPOINT}"
        ((i+=1))
    done
done
echo "Using buckets: $buckethosts"

# We need these files to exist for each app, even if they're empty.
echo "Touching $SCRIPT_DIR/apps-egress-deny.acl"
touch $SCRIPT_DIR/apps-egress-deny.acl
echo "Touching $SCRIPT_DIR/apps-egress-allow.acl"
touch $SCRIPT_DIR/apps-egress-allow.acl

# Assemble vars.yml file content

echo "Regenerate user/pass for use by proxy"
username="$(uuidgen)"
password="$(uuidgen)"

# Auto-allow bound buckets
proxydeny=$(  cat $SCRIPT_DIR/apps-egress-deny.acl || echo "" )
proxyallow=$( cat $SCRIPT_DIR/apps-egress-allow.acl <(echo "$buckethosts") || echo "" )

# Normalize into a YAML multiline block form
proxydeny=$(  echo "$proxydeny"  | sed 's/ \{1,\}/\n/g' | sed '/^\s*$/d' | sed 's/^\s*/  /'  )
proxyallow=$( echo "$proxyallow" | sed 's/ \{1,\}/\n/g' | sed '/^\s*$/d' | sed 's/^\s*/  /'  )

echo "Create ./manifest-egress-vars.yml"
touch ./manifest-egress-vars.yml
echo "proxyname: $proxyname
hostname: $proxyname
username: $username
password: $password
proxydeny: |
$proxydeny
proxyallow: |
$proxyallow
" > ./manifest-egress-vars.yml

# Deploy the proxy app
echo "Deploy Egress Proxy App"
$output cf target -o "$egressorg" -s "$egressspace" 2>&1 > /dev/null
$output cf set-env $proxyname PROXY_USERNAME "$username"
$output cf set-env $proxyname PROXY_PASSWORD "$password"
$output cf set-env $proxyname proxy_route "https://$username:$password@$proxyname.apps.internal:61443"
$output cf push $proxyname -f ./manifest-egress.yml --no-wait --strategy rolling --vars-file ./manifest-egress-vars.yml

if [ -n "${DRYRUN}" ]; then
    echo "# vars-file content:"
    echo "$(cat ./manifest-egress-vars.yml | sed -e 's/^/#  -->/')"
fi

popspace
