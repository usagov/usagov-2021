#!/bin/bash

# TODO:
#   Set the username/password each time? Or retrieve existing?

set -e
set -o pipefail

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi


usage="
$0: (Re-)deploy egress proxy for an environment

Usage:
   $0 -h
   $0 app[,app2,app3...] [egressspace [egressorg] ]

Options:
-h:            show help and exit
appnames:      comma-separated list of apps that should have egress-proxies
egressspace:   space with public egress (default: <currentspace>-egress)
egressorg:     org where the public egress space is (default: <currentorg>)

If the environment variable DRYRUN is set, the planned commands will be echoed rather
than invoked. For example:
   DRYRUN=1 $0 app1,app2 somespace someorg

Requirements:
- You must be a SpaceDeveloper in the current space and the egress_space.

NOTES:
- Files <app>.<allow|deny>.acl will be created if they don't exist
- Any S3 buckets bound to an app will automatically be allowed for that app
- Your apps will be restarted in a rolling fashion to pick up variable changes
- Post-restart, just use the http_proxy variable when making egress connections!
"

if [[ "$1" == "-h" ]]; then
    echo "${usage}"
    exit 1
fi

appnames=$1

# Grab the starting space and org where the command was run
startorg=$(   cf target | grep org:   | awk '{ print $2 }')
startspace=$( cf target | grep space: | awk '{ print $2 }')

if [ -z "${appnames}" ]; then
    echo "ERROR: You must supply at least appnames."
    echo "${usage}"
    exit 1
fi

egressspace=${2:-shared-egress}
egressorg=${3:-$startorg}
applist="${appnames//,/ }"

# Drop them off where we found them
function popspace() {
    echo "Popspace: ${startorg}/${startspace}"
    cf target -o "$startorg" -s "$startspace" > /dev/null 2>&1
}
# trap popspace exit
trap popspace err

# Check that all apps are there, or error out
echo "Using App Space ${startorg}/${startspace}"
for app in $applist ; do
    cf app "$app" > /dev/null 2>&1 || echo "ERROR: App ${app} is not available!" && missing=1
done
if [ -n "${appmissing}" ]; then
    echo "Missing at least one specified app!"
    exit 1
fi
echo "Applying egress proxy to: $applist"

# proxyname="proxy-$(echo "$startorg" | tr _. - )-$(echo "$startspace" | tr _. -)"
# proxyname="test-gsa-dev-proxy"
proxyname=""

# Try to switch to the egress org+space, error out if it's not there
cf target -o "$egressorg" -s "$egressspace" > /dev/null 2>&1 ||
    (echo "ERROR: Space ${egressorg}/${egressspace} is not available!" && exit 1)

echo "Using Egress Space ${egressorg}/${egressspace}"
if [ -z "$proxyname" ]; then
    egressapps=$(cf apps | tail -n +4 | awk '{print $1}')
    proxyname=$(echo "$egressapps" | grep -e "^${startspace}-proxy\b" | head -n 1 || echo "")
    if [ -z "$proxyname" ]; then
      proxyname=$(echo "$egressapps" | grep "^${startspace}-egress" | head -n 1 || echo "")
    fi
fi
if [ -z "$proxyname" ]; then
    echo "No existing egress proxy application"
    exit 1
fi
echo "Using egress proxy app: $proxyname"

popspace

# get proxy path for apps
cf target -o "$egressorg" -s "$egressspace" 2>&1 > /dev/null
proxyroute=$(cf env $proxyname | grep proxy_route | awk '{print $2}')
if [ -z "$proxyroute" ]; then
  echo "Unable to find route to proxy app for this space"
  exit 1
fi

# If DRYRUN is set, don't run the commands, but echo them.
if [ -n "${DRYRUN}" ]; then
    output="echo # "
fi

# add proxy setting to each app and restart
$output cf target -o "$startorg" -s "$startspace" 2>&1 > /dev/null
for app in $applist; do
    echo "Configure Egress settings for $app"
    $output cf add-network-policy "$app" "$proxyname" -s "$egressspace" -o "$egressorg" --protocol tcp --port 61443
    $output cf set-env "$app" http_proxy  $proxyroute
    $output cf set-env "$app" https_proxy $proxyroute
    $output cf set-env "$app" AWS_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt
    $output cf set-env "$app" REQUESTS_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt
    # $output cf restart "$app" --no-wait --strategy rolling
    $output cf restart "$app"
done

popspace
