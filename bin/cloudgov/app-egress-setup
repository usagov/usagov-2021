#!/bin/bash

# TODO:
#   Set the username/password each time? Or retrieve existing?

set -e
set -o pipefail

usage="
$0: (Re-)deploy egress proxies for a set of apps

Usage:
   $0 -h
   $0 app[,app2,app3...] [egressspace [egressorg] ]

Options:
-h:            show help and exit
appnames:      comma-separated list of apps that should have egress-proxies
egressspace:   space with public egress (default: <currentspace>-egress)
egressorg:     org where the public egress space is (default: <currentorg>)

If the environment variable DRYRUN is set, the planned commands will be echoed rather
than invoked. For example:
   DRYRUN=1 $0 app1,app2 somespace someorg

Requirements:
- You must be a SpaceDeveloper in the current space and the egress_space.

NOTES:
- Files <app>.<allow|deny>.acl will be created if they don't exist
- Any S3 buckets bound to an app will automatically be allowed for that app
- Your apps will be restarted in a rolling fashion to pick up variable changes
- Post-restart, just use the http_proxy variable when making egress connections!
"

if [[ "$1" == "-h" ]]; then
    echo "${usage}"
    exit 1
fi

appnames=$1

# Grab the starting space and org where the command was run
startorg=$(   cf target | grep org:   | awk --field-separator ' ' '{ print $2 }')
startspace=$( cf target | grep space: | awk --field-separator ' ' '{ print $2 }')

if [ -z "${appnames}" ]; then
    echo "ERROR: You must supply at least appnames."
    echo "${usage}"
    exit 1
fi

egressspace=${2:-${startspace}-egress}
egressorg=${3:-$startorg}
applist="${appnames//,/ }"

# Drop them off where we found them
function popspace() {
    cf target -o "$startorg" -s "$startspace" > /dev/null 2>&1
}
trap popspace exit

# Check that all apps are there, or error out
for app in $applist ; do
    cf app "$app" > /dev/null 2>&1 || echo "ERROR: App ${app} is not available!" && missing=1
done
if [ -n "${appmissing}" ]; then
    echo "Missing at least one specified app!"
    exit 1
fi

# Try to switch to the egress org+space, error out if it's not there
cf target -o "$egressorg" -s "$egressspace"  > /dev/null 2>&1 ||
    (echo "ERROR: Space ${egressorg}/${egressspace} is not available!" && popspace && exit 1)
popspace

# If DRYRUN is set, don't run the commands, but echo them.
if [ -n "${DRYRUN}" ]; then
    output="echo # "
fi

for app in $applist ; do

    # Grab the hostnames for any attached S3 buckets to include in the allow list
    buckethosts=""
    VCAP_SERVICES=$(cf env "$app" | sed -n -e "/VCAP_SERVICES/,\$p" | sed -e "/VCAP_APPLICATION:/,\$d" | sed 's/VCAP_SERVICES: //g' | jq -r )
    n=$(echo "$VCAP_SERVICES" | jq -r '.s3 | length')
    i=0
    while [ $i -lt "$n" ]
    do
        # Add attached buckets to the allow list
        BUCKET=$(            echo "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.bucket")
        AWS_ENDPOINT=$(      echo "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.endpoint")
        AWS_FIPS_ENDPOINT=$( echo "$VCAP_SERVICES" | jq -r ".s3[$i].credentials.fips_endpoint")

        # Add both the FIPS and non-FIPS hostnames
        buckethosts="$buckethosts ${BUCKET}.${AWS_ENDPOINT} ${BUCKET}.${AWS_FIPS_ENDPOINT}"
        ((i+=1))
    done

    # We need these files to exist for each app, even if they're empty.
    touch "$app".deny.acl "$app".allow.acl

    # Assemble vars.yml file content
    proxyname="proxy-$(echo "$startorg" | tr _. - )-$(echo "$startspace" | tr _. -)-${app}"
    # A function to generate a random quote-safe password
    randpw(){ < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo; }

    username="$(randpw)"
    password="$(randpw)"

    # Auto-allow bound buckets
    proxydeny=$(  cat "$app".deny.acl )
    proxyallow=$( cat "$app".allow.acl <(echo "$buckethosts") )

    # Normalize into a YAML multiline block form
    proxydeny=$(  echo "$proxydeny"  | sed 's/^\S/ &/' | sed 's/\ /\n  /g' | sed '/^\s*$/d' )
    proxyallow=$( echo "$proxyallow" | sed 's/^\S/ &/' | sed 's/\ /\n  /g' | sed '/^\s*$/d' )
    varsfile="proxyname: $proxyname
hostname: $proxyname
username: $username
password: $password
proxydeny: |
$proxydeny
proxyallow: |
$proxyallow
"

    # We're ready, let's do this!
    $output cf target -o "$egressorg" -s "$egressspace"
    $output cf push --no-wait --strategy rolling --vars-file <(echo "$varsfile")
    if [ -n "${DRYRUN}" ]; then
        echo "# vars-file content:"
        echo "$(echo "$varsfile" | sed -e 's/^/#  -->/')"
    fi
    $output cf target -o "$startorg" -s "$startspace"
    $output cf add-network-policy "$app" "$proxyname" -s "$egressspace" -o "$egressorg" --protocol tcp --port 8080
    $output cf set-env "$app" http_proxy  "https://$username:$password@$proxyname.apps.internal:8080"
    $output cf set-env "$app" https_proxy "https://$username:$password@$proxyname.apps.internal:8080"
    $output cf restart "$app" --no-wait --strategy rolling

done

popspace
