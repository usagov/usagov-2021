#!/bin/bash

# TODO:
#   Set the username/password each time? Or retrieve existing?

set -e
set -o pipefail

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi


usage="
$0: (Re-)deploy newrelic for an environment

Usage:
   $0 -h
   $0 app[,app2,app3...] [newrelicspace [newrelicorg] ]

Options:
-h:            show help and exit
appnames:      comma-separated list of apps that should have newrelic-proxies
newrelicspace:   space with public newrelic (default: newrelic)
newrelicorg:     org where the public newrelic space is (default: <currentorg>)

If the environment variable DRYRUN is set, the planned commands will be echoed rather
than invoked. For example:
   DRYRUN=1 $0 app1,app2 somespace someorg

Requirements:
- You must be a SpaceDeveloper in the current space and the newrelic_space.
"

if [[ "$1" == "-h" ]]; then
    echo "${usage}"
    exit 1
fi

appnames=""
restartRequired=1

if [[ "$1" == "--no-restart" ]]; then
  restartRequired=0
  appnames=$2
elif [[ "$2" == "--no-restart" ]]; then
  restartRequired=0
  appnames=$1
else
  restartRequired=1
  appnames=$1
fi

# Grab the starting space and org where the command was run
startorg=$(   cf target | grep org:   | awk '{ print $2 }')
startspace=$( cf target | grep space: | awk '{ print $2 }')

if [ -z "${appnames}" ]; then
    echo "ERROR: You must supply a comma-delimited list of appnames."
    echo "${usage}"
    exit 1
fi

newrelicspace=shared-egress
newrelicorg="$startorg"
applist="${appnames//,/ }"

# Drop them off where we found them
function popspace() {
    echo "Popspace: ${startorg}/${startspace}"
    cf target -o "$startorg" -s "$startspace" > /dev/null 2>&1
}
# trap popspace exit
trap popspace err

# Check that all apps are there, or error out
echo "Using App Space ${startorg}/${startspace}"
for app in $applist ; do
    cf app "$app" > /dev/null 2>&1 || echo "ERROR: App ${app} is not available!" && missing=1
done
if [ -n "${appmissing}" ]; then
    echo "Missing at least one specified app!"
    exit 1
fi
echo "Applying newrelic info to: $applist"

# If DRYRUN is set, don't run the commands, but echo them.
if [ -n "${DRYRUN}" ]; then
    output="echo # "
fi

# add proxy setting to each app and restart
$output cf target -o "$startorg" -s "$startspace" 2>&1 > /dev/null
for app in $applist; do
    echo "Configure newrelic settings for $app"
    $output cf add-network-policy "$app" newrelic -s "$newrelicspace" -o "$newrelicorg" --protocol tcp --port "$NEW_RELIC_DAEMON_PORT"

    # do not restart app here as this causes extra restarts during cms deploy
    # devs may have to call cf restart directly in some cases where this script
    # is used standone from the deploy scripts

    if [ $restartRequired -eq 1 ]; then
      $output cf restart "$app" --no-wait --strategy rolling
      # $output cf restart "$app"
    fi
done

popspace
