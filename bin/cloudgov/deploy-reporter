#!/usr/bin/env bash
set -euo pipefail

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi

DOCKERUSER=${DOCKERUSER:-gsatts}
DOCKERREPO=${DOCKERREPO:-usagov-2021}

APPNAME="AnalyticsReporter"

# SPACE=$( cf target | grep space: | awk '{ print $2 }')

# The Image digest for this tag should be looked up from cloud.gov storage
# Any tag with a stored Image digest should be referenced by hash instead of tag

# Need to create 'external-domain' service for custom routes: *.usa.gov
# cf delete-service dev-usagov-domain
# cf create-service external-domain domain dev-usagov-domain -c '{"domains": "cms-dev.usa.gov,beta-dev.usa.gov"}'
# cf create-service external-domain domain-with-cdn stage-usagov-domain -c '{"domains": "cms-stage.usa.gov,beta-stage.usa.gov"}'
# cf create-service external-domain domain-with-cdn prod-www-usagov-domain -c '{"domains": "beta.usa.gov"}'
# cf create-service external-domain domain          prod-cms-usagov-domain -c '{"domains": "cms.usa.gov"}'
# cf service prod-cms-usagov-domain

# this function is a convenient symantic wrapper around a one-liner
service_exists()
{
  cf service "$1" >/dev/null 2>&1
}

if ! command -v jq >/dev/null; then
  printf "\nMust have JQ installed\n"
  exit 1
fi

echo create services
if service_exists "${APPNAME}Services" ; then
  echo ${APPNAME}Services already created
else
  cf cups ${APPNAME}Services
fi
cf create-service s3 basic-public-sandbox s3for${APPNAME}

echo launch the app
echo "Deploying ${DOCKERUSER}/${DOCKERREPO}:reporter"
cf push ${APPNAME} -f ./manifest-reporter.yml --docker-image ${DOCKERUSER}/${DOCKERREPO}:reporter

echo bind services
cf bind-service ${APPNAME} s3for${APPNAME}
cf bind-service ${APPNAME} ${APPNAME}Services

echo collect info about s3 service
VCAP_SERVICES=$(cf env "$APPNAME" | sed -n -e "/VCAP_SERVICES/,\$p" | sed -e "/VCAP_APPLICATION:/,\$d" | sed 's/VCAP_SERVICES: //g' | jq -r )
BUCKET=$(            echo -E "$VCAP_SERVICES" | jq -r ".s3[0].credentials.bucket")
ACCESS_KEY_ID=$(     echo -E "$VCAP_SERVICES" | jq -r ".s3[0].credentials.access_key_id" | uniq )
REGION=$(            echo -E "$VCAP_SERVICES" | jq -r ".s3[0].credentials.region" | uniq )
SECRET_ACCESS_KEY=$( echo -E "$VCAP_SERVICES" | jq -r ".s3[0].credentials.secret_access_key" | uniq )

echo update user service
yes '' | cf uups ${APPNAME}Services -p " {\"ANALYTICS_KEY\": \"$ANALYTICS_KEY\", \"ANALYTICS_REPORT_EMAIL\": \"$ANALYTICS_REPORT_EMAIL\", \"ANALYTICS_REPORT_IDS_BOTH\": \"$ANALYTICS_REPORT_IDS_BOTH\", \"ANALYTICS_REPORT_IDS_EN\": \"$ANALYTICS_REPORT_IDS_EN\", \"ANALYTICS_REPORT_IDS_ES\": \"$ANALYTICS_REPORT_IDS_ES\", \"AWS_ACCESS_KEY_ID\": \"$ACCESS_KEY_ID\", \"AWS_BUCKET\": \"$BUCKET\", \"AWS_BUCKET_PATH_BOTH\": \"$AWS_BUCKET_PATH_BOTH\", \"AWS_BUCKET_PATH_EN\": \"$AWS_BUCKET_PATH_EN\", \"AWS_BUCKET_PATH_ES\": \"$AWS_BUCKET_PATH_ES\", \"AWS_REGION\": \"$REGION\", \"AWS_SECRET_ACCESS_KEY\": \"$SECRET_ACCESS_KEY\"}"

echo remove proxy
cf set-env ${APPNAME} http_proxy ""
cf set-env ${APPNAME} https_proxy ""
cf set-env ${APPNAME} HTTPS_PROXY ""
cf set-env ${APPNAME} HTTP_PROXY ""

echo restage for variables
cf restage ${APPNAME}