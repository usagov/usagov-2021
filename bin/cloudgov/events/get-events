#!/usr/bin/env bash

# Retreive Event Log entries from the Cloud Foundry Events API.

# This is located under bin/ so it can be called locally. However, it is
# copied into /opt/cfevents/ during docker image creation for the cron app

# we might be running in circleci
if [ -f /home/circleci/project/env.local ]; then
  . /home/circleci/project/env.local
fi
# we might be running from a local dev machine
SCRIPT_DIR="$(dirname "$0")"
if [ -f $SCRIPT_DIR/env.local ]; then
  . $SCRIPT_DIR/env.local
fi
if [ -f ./env.local ]; then
  . ./env.local
fi

if [ ! command -v cf &> /dev/null ]; then
  echo "CF : the cloud foundry client could not be found and is required"
  exit 1
fi

if [ ! command -v jq &> /dev/null ]; then
  echo "JQ: the command jq could not be found and is required"
  exit 2
fi

### NOTE: the SPACE argument is for telling the cf log API to filter the request by org and space guid.
###       This appears not to work, as we are getting logs for all spaces.  Perhaps the query is incorrect?
SPACE=${1:-none_specified}
SPACE=$(echo "$SPACE" | tr '[:upper:]' '[:lower:]')
if [ $SPACE = 'none_specified' ]; then
  echo "Please provide a CF Space name as the first argument"
  exit 3
fi
shift

SFAIL=0
cf space $SPACE &>/dev/null || SFAIL=1
if [ $SFAIL = 1 ]; then
  echo ": CF space '$SPACE' does not exist!"
  exit 4
fi

# Grab the starting space and org where the command was run
startorg=$(     cf target | grep org:   | awk '{ print $2 }')
startspace=$( cf target | grep space: | awk '{ print $2 }')

# Drop them off where we found them
function popspace() {
  if [ -n "$startorg" ] && [ -n "$startspace" ]; then
    #echo "Popspace: ${startorg}/${startspace}"
    cf target -o "$startorg" -s "$startspace" > /dev/null 2>&1
  fi
}

trap popspace EXIT
trap popspace ERR

SPACE_GUID=$(cf space $SPACE --guid)

cf target -s $SPACE &>/dev/null

declare -A SPACE_GUIDS=()
# Keep the code needed to query multiple spaces for events. Not working now, but may be possible.
#  for SPACE in dev stage prod shared-egress shared-egress-dr tools; do
for SPC in $SPACE; do
  if [ ! cf space $SPC &> /dev/null ]; then
    echo "ERROR: CF space '$SPC' does not exist!"
  else
    SPACE_GUID=$(cf space $SPC --guid)
    SPACE_GUIDS[$SPACE_GUID]=$SPC
  fi
done

CURRENT_ORG=$(cf target | grep org: | awk '{ print $2 }')
export ORG_GUID=$(cf org $CURRENT_ORG --guid)

### We'll request logs generated after LAST_EVENT_TIME.  If nothing was 
### specified on the command line, start from 24 hours ago
LAST_EVENT_TIME=$1
if [ -z "$LAST_EVENT_TIME" ]; then
  LAST_EVENT_TIME=$(TZ=UTC date -d "$CFEVENTS_DEFAULT_LASTRUN" +"$CFEVENTS_DATE_FORMAT")
fi

declare -rA AUDIT_TYPES=(
    ["app"]="audit.app.create,audit.app.start,audit.app.restage,audit.app.stop,audit.app.delete"
    ["user"]="audit.user.space_developer_add,audit.user.space_developer_remove,audit.user.space_auditor_add,audit.user.space_auditor_remove,audit.user.space_manager_add,audit.user.space_manager_remove"
    ["route"]="audit.route.create,audit.route.delete-request,audit.route.update"
    ["service"]="audit.service.create,audit.service.delete,audit.service.update,audit.service_binding.create,audit.service_binding.delete,service_instance.bind_route,audit.service_instance.create,audit.service_instance.delete,audit.service_instance.unbind_route,audit.service_instance.update"
    ["service_instance"]="audit.service_instance.create,audit.service_instance.bind_route,audit.service_instance.update,audit.service_instance.unbind_route,audit.service_instance.delete"
)

### These are the same currently, but may change. Therefore I've got them in variables for now
declare -rA AUDIT_FIELDS=(
                 ["app"]=".metadata.guid, .entity.timestamp, .entity.type, .entity.actee_name, .entity.space_guid, .entity.actor_type, .entity.actor_name"
                ["user"]=".metadata.guid, .entity.timestamp, .entity.type, .entity.actee_name, .entity.space_guid, .entity.actor_type, .entity.actor_name"
               ["route"]=".metadata.guid, .entity.timestamp, .entity.type, .entity.actee_name, .entity.space_guid, .entity.actor_type, .entity.actor_name"
             ["service"]=".metadata.guid, .entity.timestamp, .entity.type, .entity.actee_name, .entity.space_guid, .entity.actor_type, .entity.actor_name"
    ["service_instance"]=".metadata.guid, .entity.timestamp, .entity.type, .entity.actee_name, .entity.space_guid, .entity.actor_type, .entity.actor_name"
)

### Reformat event outoput into key:value pairs that can be more easily ingested by NewRelic (1)
match='"\(.*\)","\(.*\)","\(.*\)","\(.*\)","\(.*\)","\(.*\)","\(.*\)"'
replace='"cfevent.metadata.guid:\1","cfevent.entity.timestamp:\2","cfevent.entity.type:\3","cfevent.entity.actee_name:\4","cfevent.entity.space_name:\5","cfevent.entity.actor_type:\6","cfevent.entity.actor_name:\7"'

# For each category of audit events, perform a (possibly multi-page) query 
for resource_type in ${!AUDIT_TYPES[@]}; do
    types=${AUDIT_TYPES[$resource_type]}
    fields=${AUDIT_FIELDS[$resource_type]}

    # Manually create the query to fetch the first page of results
    NEXT="/v2/events?&q=type+IN+${types}&q=organization_guid:${ORG_GUID}&q=space_guid:${SPACE_GUID}&q=timestamp>${LAST_EVENT_TIME}&order-by:timestamp"

    while [ -n $NEXT -a ! $NEXT == 'null' ]; do

        EVENTS=$(cf curl $NEXT)

        ## Reformat event outoput into key:value pairs that can be more easily ingested by NewRelic (2)
        captured_events=$(echo "$EVENTS" | jq -r ".resources[] | [$fields] | @csv" | sed "s/$match/$replace/g")

        # Replace any cf space guids with the space name
        for SPACE_GUID in "${!SPACE_GUIDS[@]}"; do
          captured_events=$(echo "$captured_events" | sed "s/$SPACE_GUID/${SPACE_GUIDS[$SPACE_GUID]}/")
        done

        # Don't emit an empty list
        if [ "$captured_events" != "" ]; then
          echo "$captured_events"
        fi

        # Each query provides the URL for the next page of results.  Use it to loop through pages
        NEXT=$(echo $EVENTS | jq -r '.next_url')
    done
done
