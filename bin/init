#!/bin/bash

# figure out which host os we are since not all build/install commands work the same on all os
# some node packages also need to be different on m1 chips
export os_osx="no"
export os_osx_x86="no"
export os_osx_m1="no"
export os_win="no"
export os_wsl="no"
export os_linux="no"

if [[ "$(uname)" == "Darwin" ]]; then
  export os_osx="yes"
  if [[ "$(arch)" == "arm64" ]]; then
    export os_osx_m1="yes"
  else
    export os_osx_x86="yes"
  fi
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
  export os_linux="yes"
  if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
    export os_wsl="yes"
  fi
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
  export os_win="yes"
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]]; then
  export os_win="yes"
fi

echo "HOST OS Detector:"
if [[ "$os_osx" == "yes" ]]; then
  if [[ "$os_osx_x86" == "yes" ]]; then
    echo "- Mac x86"
  fi
  if [[ "#os_osx_m1" == "yes" ]]; then
    echo "- Mac M1"
  fi
fi
if [[ "$os_linux" == "yes" ]]; then
  if [[ "$os_wsl" == "yes" ]]; then
    echo "- Win WSL"
  else
      echo "- Linux"
  fi
fi
if [[ "$os_win" == "yes" ]]; then
  echo "- Windows"
fi


# Setup environmental variables so current User and Group Ids are available at container build time
# spam out to a variety of possible files to cover common cases acrosss dev machines
echo "Setup BUID and BGID environmental variables"
if [ -f ~/.zshrc ] && ! grep -q 'export BUID=' ~/.zshrc; then
  echo "export BUID=\$(id -u)" >> ~/.zshrc
  echo "export BGID=\$(id -g)" >> ~/.zshrc
fi
if [ -f ~/.bashrc ] && ! grep -q "export BUID=" ~/.bashrc; then
  echo "export BUID=\$(id -u)" >> ~/.bashrc
  echo "export BGID=\$(id -g)" >> ~/.bashrc
fi
if [ -f ~/.bash_profile ] && ! grep -q "export BUID=" ~/.bash_profile; then
  echo "export BUID=\$(id -u)" >> ~/.bash_profile
  echo "export BGID=\$(id -g)" >> ~/.bash_profile
fi
if [ -f ~/.profile ] && ! grep -q "export BUID=" ~/.profile; then
  echo "export BUID=\$(id -u)" >> ~/.profile
  echo "export BGID=\$(id -g)" >> ~/.profile
fi

echo "Init local secrets file"
if [ ! -f env.local ]; then
  cp env.default env.local
fi
if [ -f env.local ]; then
  . env.local
fi

host_node_base=node
# node image is now multi-architecture, so we don't currently need:
# if [[ "$os_osx_m1" == "yes" ]]; then
#   echo "Alter Node base image since we think you are on an M1 mac"
#   host_node_base=arm64v8/node
# fi

# can't get sed -i to work cross platform so just do it dirty
sed -e 's|NODE_BASE=.*|NODE_BASE='$host_node_base'|' env.local > env.local.new
mv env.local.new env.local

echo "Setup git hooks"
if [ ! -f .git/hooks/commit-msg ]; then
  cp .git.commit-msg .git/hooks/commit-msg
  chmod +x .git/hooks/commit-msg
fi

echo "Build Containers"
bin/build

echo "Fix permissions inside Containers - this could take a long time"
docker compose run \
 -e BUID=${BUID:-$(id -u)} \
 -e BGID=${BGID:-$(id -g)} \
 --rm --no-deps --workdir /var/www  \
 -u root composer /var/www/bin/fix-perms-in-container

echo "Install Drupal modules"
# bin/drush cr
bin/composer install --no-interaction --optimize-autoloader

echo "Build theme"
bin/npm install
bin/npm run build


echo "Init process complete"
