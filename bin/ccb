#!/bin/bash

usage="
$0: Compares two branches and prints the difference between the two in comments
labeled by the Jira ticket ID.

Usage:
   $0 -h
   $0 branch1 branch2

Options:
-h:            show help and exit
branch1:       the first branch
branch2:       the second branch
"

PREAMBLE=$(sed -E 's/bin\/.*\/includes/bin\/includes/g' <<< "$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/includes/preamble.sh")
if [ -f "$PREAMBLE" ]; then
  # shellcheck source=bin/includes/preamble.sh
  . "$PREAMBLE"
else
   echo Cannot find preamble at "$PREAMBLE"
   exit 1
fi

COMMIT_A=${1:-stage}
COMMIT_B=${2:-prod}

if ! git cat-file -t $COMMIT_A > /dev/null; then
  echo "Commit '$COMMIT_A' not found in this repo"
  exit 1
fi
if ! git cat-file -t $COMMIT_B > /dev/null; then
  echo "Commit '$COMMIT_B' not found in this repo"
  exit 1
fi

# reorder the inputs by commit time
COMMITS_FROM_A=$(git show -s --format="%ct %S" $COMMIT_A)
COMMITS_FROM_B=$(git show -s --format="%ct %S" $COMMIT_B)
COMMITS_SORTED=$( { echo "$COMMITS_FROM_A" & echo "$COMMITS_FROM_B"; } | sort -n | awk '{print $2}' );

NEWEST=$(echo "$COMMITS_SORTED" | head -n 1)
OLDEST=$(echo "$COMMITS_SORTED" | tail -n 1)

if [ "$NEWEST" == "$OLDEST" ]; then
    echo "Commits are the same $NEWEST..$OLDEST"
    exit 0
fi

echo
echo "Tickets between $NEWEST <-> $OLDEST"
echo

# the name of the repo shows up as a ticket so we have to explicitly ignore it
# branch names have been sloppy so accept anything from "Usa 123" to "usa_123" to "USAGOV-123"
# be careful because [-_ 	] has a space and a tab inside of the brackets
COMMITS_BETWEEN=$(git log ${NEWEST}..${OLDEST})
if [ -z "$COMMITS_BETWEEN" ]; then
  echo "  ... Same commits"
else
  echo $COMMITS_BETWEEN | grep -Eio 'usa(gov)?[-_ 	]([0-9]+)' | sed -E 's/usa(gov)?[-_ 	]([0-9]+)/USAGOV-\2/ig' | grep -iv usagov-2021 | sort -u
fi
echo
