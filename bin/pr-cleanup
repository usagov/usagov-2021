#!/bin/bash

usage="
$0: Removes PR containers made with pr-review.sh.

Usage:
   $0 -h
   $0 TICKET

Options:
-h:            show help and exit
TICKET         Name or number of JIra ticket
"
if [[ "$1" == "-h" ]]; then
    echo "${usage}"
    exit 1
fi

TICKET=$1

if [ -z "$TICKET" ] ; then
  echo "Usage: $0 <ticket name or number>"
  exit 1
fi

# fuzzy search for ticket by number
BRANCH=
BRANCH_LIST=$(git ls-remote --heads origin | sed 's|.*refs/heads/||')
MATCHES_0=$(echo "$BRANCH_LIST" | grep --ignore-case -e '\b\(usagov-\)'$TICKET'[^0-9]')
MATCHES_1=$(echo "$BRANCH_LIST" | grep --ignore-case -e '\b\(usagov-\)'$TICKET'$')
MATCHES_2=$(echo "$BRANCH_LIST" | grep --ignore-case -e '\b'$TICKET'$')
MATCHES_3=$(echo "$BRANCH_LIST" | grep --ignore-case -e '\b'$TICKET'[^0-9]')
if [ -z "$BRANCH" ] && [ -n "$MATCHES_0" ]; then
  COUNT=$(echo "$MATCHES_0" | wc -l)
  if [ "$COUNT" -gt 1 ] ; then
    echo "Multiple ambiguous matches found for '$TICKET'"
    echo "$MATCHES_0"
    exit 1
  fi
  MATCH=$(echo "$MATCHES_0" | head -n1)
  if [ -n "$MATCH" ]; then
    BRANCH=$MATCH
  fi
fi
if [ -z "$BRANCH" ] && [ -n "$MATCHES_1" ]; then
  COUNT=$(echo "$MATCHES_1" | wc -l)
  if [ "$COUNT" -gt 1 ] ; then
    echo "Multiple ambiguous matches found for '$TICKET'"
    echo "$MATCHES_1"
    exit 1
  fi
  MATCH=$(echo "$MATCHES_1" | head -n1)
  if [ -n "$MATCH" ]; then
    BRANCH=$MATCH
  fi
fi
if [ -z "$BRANCH" ] && [ -n "$MATCHES_2" ]; then
  COUNT=$(echo "$MATCHES_2" | wc -l)
  if [ "$COUNT" -gt 1 ] ; then
    echo "Multiple ambiguous matches found for '$TICKET'"
    echo "$MATCHES_2"
    exit 1
  fi
  MATCH=$(echo "$MATCHES_2" | head -n1)
  if [ -n "$MATCH" ]; then
    BRANCH=$MATCH
  fi
fi
if [ -z "$BRANCH" ] && [ -n "$MATCHES_3" ]; then
  COUNT=$(echo "$MATCHES_3" | wc -l)
  if [ "$COUNT" -gt 1 ] ; then
    echo "Multiple ambiguous matches found for '$TICKET'"
    echo "$MATCHES_3"
    exit 1
  fi
  MATCH=$(echo "$MATCHES_3" | head -n1)
  echo "~$MATCH"
  if [ -n "$MATCH" ]; then
    BRANCH=$MATCH
  fi
fi
if [ -z "$BRANCH" ]; then
  echo "No branch found for '$TICKET'."
  exit 1
fi
echo "Branch '$BRANCH' found for '$TICKET'."

# figure out where our current repo is
OG_ROOT=$(git rev-parse --show-toplevel)

# make sure we have docker available
DOCKER_IS_RUNNING=$(docker ps 2>&1 > /dev/null)
if [ "$?" != "0" ] ; then
  echo "Docker is not running. Start Docker and try again."
  exit 1
fi

# use a sepcial directory for our pr checking
PR_DIR=pr-$BRANCH

# free up docker ports
echo "cd $OG_ROOT"
cd $OG_ROOT

# setup seperate directory for our pr
echo "cd .."
cd ..
echo "cd $PR_DIR"
cd $PR_DIR

# cleanup docker
echo "docker compose down"
docker compose down --remove-orphans --rmi local --volumes

# these seem to be too much - but we may get back to them
# docker image prune -a -f
# docker container prune -f
# docker volume prune -f
# docker network prune -f
# docker system prune -f
# docker system prune --volumes -f
# docker builder prune -f

# remove our pr directory - but try and be careful
echo "cd .."
cd ..
if [ -d "./$PR_DIR" ] && [[ "$PR_DIR" == pr-* ]] && [[ "$PR_DIR" != *..* ]]; then
  echo "rm -rf ./$PR_DIR"
  rm -rf ./$PR_DIR
fi

# wait for the containers to come up
echo
echo "All local assets associated with $BRANCH have been removed"
echo
