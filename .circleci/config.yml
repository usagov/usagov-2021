version: 2.1

commands:
  deploy-cloudgov:
    parameters:
      envname:
        default: "dev"
        type: string
    steps:
      - checkout
      - run:
          name: Setup Environment for use in Scripts
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
      - install-cloud-foundry
      - load-image-digest
      - run:
          name: CloudGov Deploy
          command: |
            export NEW_RELIC_APP_NAME="CMS-<< parameters.envname >>;USA.gov"
            export NEW_RELIC_DISPLAY_NAME=usa-cms-<< parameters.envname >>
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS << parameters.envname >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/cloudgov/deploy-cms << pipeline.number >> $CMS_DIGEST

  save-image-digest:
    steps:
      - run:
          name: Save Image Digest
          command: |
            (export DOCKER_CONTENT_TRUST=1; docker pull ${DOCKERUSER}/${DOCKERREPO}:cms-<< pipeline.number >>)
            (export DOCKER_CONTENT_TRUST=1; docker pull ${DOCKERUSER}/${DOCKERREPO}:waf-<< pipeline.number >>)
            CMS_DIGEST=$(docker inspect ${DOCKERUSER}/${DOCKERREPO}:cms-<< pipeline.number >> --format '{{json .RepoDigests}}' | jq -r '.[]' | grep sha256 | sed 's/^[^@]*@//')
            WAF_DIGEST=$(docker inspect ${DOCKERUSER}/${DOCKERREPO}:waf-<< pipeline.number >> --format '{{json .RepoDigests}}' | jq -r '.[]' | grep sha256 | sed 's/^[^@]*@//')
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS shared-egress
            cf target -s shared-egress -o gsa-tts-usagov
            . ./bin/cloudgov/get-s3-access key-value
            echo "$CMS_DIGEST" > /tmp/results/cms_digest
            echo "$WAF_DIGEST" > /tmp/results/waf_digest
            aws s3 cp /tmp/results/cms_digest s3://${S3_BUCKET}/${DOCKERUSER}/${DOCKERREPO}/cms-<< pipeline.number >>
            aws s3 cp /tmp/results/waf_digest s3://${S3_BUCKET}/${DOCKERUSER}/${DOCKERREPO}/waf-<< pipeline.number >>

  load-image-digest:
    steps:
      - run:
          name: Load Image Digest
          command: |
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS shared-egress
            cf target -s shared-egress -o gsa-tts-usagov
            . ./bin/cloudgov/get-s3-access key-value
            export CMS_DIGEST=""
            export WAF_DIGEST=""
            if aws s3 cp s3://${S3_BUCKET}/${DOCKERUSER}/${DOCKERREPO}/cms-<< pipeline.number >> ./cms-image-digest; then export CMS_DIGEST="@"$(cat ./cms-image-digest); fi
            if aws s3 cp s3://${S3_BUCKET}/${DOCKERUSER}/${DOCKERREPO}/waf-<< pipeline.number >> ./waf-image-digest; then export WAF_DIGEST="@"$(cat ./waf-image-digest); fi
            export CMS_DIGEST=$CMS_DIGEST
            export WAF_DIGEST=$WAF_DIGEST
            echo 'export CMS_DIGEST='"$CMS_DIGEST" | tee -a $BASH_ENV
            echo 'export WAF_DIGEST='"$WAF_DIGEST" | tee -a $BASH_ENV

  install-cloud-foundry:
    steps:
      - run:
          name: Install CloudFoundry
          command: |
            if command cf > /dev/null; then echo "CF client already installed"; exit 0; fi
            wget --user-agent="Mozilla" -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf -v

  install-node:
    steps:
      - run:
          name: Install Specific Node Version
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v18.3.0
            nvm alias default 18.3.0
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo "Install Gulp on node "$(node --version)
            sudo npm install --global gulp-cli

  snapshot-backup:
    parameters:
      envname:
        default: "dev"
        type: string
    steps:
      - checkout
      - install-cloud-foundry
      - run:
          name: Snapshot Backup of Static Site and Database. Tag will be << pipeline.git.tag >>.<< parameters.envname >>.<< pipeline.number >>
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS << parameters.envname >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/snapshot-backups/site-snapshot-create << pipeline.git.tag >>.<< parameters.envname >>.<< pipeline.number >>
            ./bin/snapshot-backups/db-dump-to-snapshot << pipeline.git.tag >>.<< parameters.envname >>.<< pipeline.number >>

  deploy-reporter:
    parameters:
      envname:
        default: "tools"
        type: string
    steps:
      - checkout
      - install-cloud-foundry
      - run:
          name: Login to Docker Hub
          no_output_timeout: 30m
          command: |
            echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build Reporter Container
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS << parameters.envname >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/cloudgov/container-build-reporter
      - run:
          name: Push Reporter Container to Dockerhub
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS << parameters.envname >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/cloudgov/container-push-reporter
      - run:
          name: Deploy Analytics Reporter
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            ./bin/cloudgov/login $CF_SERVICE_USER $CF_SERVICE_PASS << parameters.envname >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/cloudgov/deploy-reporter

jobs:
  scan-code:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - checkout
      - install-cloud-foundry
      - run:
          name: Setup Environment for use in Scripts
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            mkdir -p /tmp/results
            touch /tmp/results/scan-cms-code.log
            touch /tmp/results/scan-cms-dependencies.log
      - run:
          name: Scan Code
          when: always
          command: |
            SCAN_CODE_RESULT=0
            if (./bin/scan-code low | tee /tmp/results/scan-cms-code.log); then export SCAN_CODE_RESULT=0; else export SCAN_CODE_RESULT=$?; fi
            echo "CMS Code Scan return code: $SCAN_CODE_RESULT" | tee -a /tmp/results/scan-cms-code.log
            cat /tmp/results/scan-cms-code.log
            exit $SCAN_CODE_RESULT
      - run:
          name: Scan Dependencies
          when: always
          command: |
            SCAN_DEPS_RESULT=0
            if (./bin/scan-dependencies low | tee /tmp/results/scan-cms-dependencies.log); then export SCAN_DEPS_RESULT=0; else export SCAN_DEPS_RESULT=$?; fi
            echo "CMS Dependency Scan return code: $SCAN_DEPS_RESULT" | tee -a /tmp/results/scan-cms-dependencies.log
            cat /tmp/results/scan-cms-dependencies.log
            exit $SCAN_DEPS_RESULT
      - run:
          name: Check CIS Benchmarks
          when: always
          command: |
            # build a fresh docker-bench-security container
            cd /tmp/
            git clone https://github.com/docker/docker-bench-security.git
            cd /tmp/docker-bench-security
            docker build --no-cache -t docker-bench-security .
            # use the fresh container to scan
            SCAN_CIS_RESULT=0
            cd /home/circleci/project
            if (./bin/scan-container-cis | tee /tmp/results/scan-cms-cis.log); then export SCAN_CIS_RESULT=0; else export SCAN_CIS_RESULT=$?; fi
            echo "CMS CIS Benchmark Scan return code: $SCAN_CMS_RESULT" | tee -a /tmp/results/scan-cms-cis.log
            cat /tmp/results/scan-cms-cis.log
            exit $SCAN_CIS_RESULT
      - store_artifacts:
          path: /tmp/results
          destination: circleci-docs
      - store_test_results:
          path: /tmp/results/test-results


  lint:
    docker:
      - image: cimg/php:8.0.16-node
    steps:
      - checkout
      - install-node
      - run:
          name: Install Linters and Sniffers
          command: |
            npm install --prefix ./web/themes/custom/usagov
            composer global require --dev drupal/coder php-parallel-lint/php-parallel-lint
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/phpcs --config-set installed_paths $COMPOSER_DIR/vendor/drupal/coder/coder_sniffer,$COMPOSER_DIR/vendor/sirbrillig/phpcs-variable-analysis,$COMPOSER_DIR/vendor/slevomat/coding-standard
            mkdir -p /tmp/results
            touch /tmp/results/php-lint.log
            touch /tmp/results/php-cs.log
            touch /tmp/results/theme-lint.log
      - run:
          name: PHP Lint
          command: |
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/parallel-lint -e php,module,inc,install,test,profile,theme ./web/modules/custom ./web/themes/custom | tee /tmp/results/php-lint.log
      - run:
          name: PHP CodeSniff (ignore warnings)
          command: |
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/phpcs -ns --standard=./.phpcs.xml.dist | tee /tmp/results/php-cs.log
      - run:
          name: Theme Lint
          command: npm run lint --prefix ./web/themes/custom/usagov | tee /tmp/results/theme-lint.log
      - store_artifacts:
          path: /tmp/results

  build-and-push-container:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - checkout
      - run:
          name: Setup Environment for use in Scripts
          command: |
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | tee /home/circleci/project/env.local
            mkdir -p /tmp/results
            touch /tmp/results/scan-cms-code.log
            touch /tmp/results/scan-cms-dependencies.log
            touch /tmp/results/scan-cms-container.log
            touch /tmp/results/scan-waf-container.log
            touch /tmp/results/scan-cms-container-cis.log
            touch /tmp/results/scan-waf-container-cis.log
      - run:
          name: Set up DCT signer key
          command: |
            mkdir -p $HOME/.docker/trust/private
            # Decode and store signer key to file named as the key hash
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            # Set required permissions level on key file
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
      - run:
          name: Login to Docker Hub
          no_output_timeout: 30m
          command: |
            echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Scan Code
          command: |
            SCAN_CODE_RESULT=0
            if (./bin/scan-code high | tee /tmp/results/scan-cms-code.log); then export SCAN_CODE_RESULT=0; else export SCAN_CODE_RESULT=$?; fi
            echo "Code Scan return code: $SCAN_CODE_RESULT" | tee -a /tmp/results/scan-cms-code.log
            cat /tmp/results/scan-cms-code.log
            exit 0
      - run:
          name: Scan Dependencies
          command: |
            SCAN_DEPS_RESULT=0
            if (./bin/scan-dependencies high | tee /tmp/results/scan-cms-dependencies.log); then export SCAN_DEPS_RESULT=0; else export SCAN_DEPS_RESULT=$?; fi
            echo "Dependencies Scan return code: $SCAN_DEPS_RESULT" | tee -a /tmp/results/scan-cms-dependencies.log
            cat /tmp/results/scan-cms-dependencies.log
            exit 0
      - run:
          name: Build Container
          no_output_timeout: 30m
          command: |
            ./bin/cloudgov/container-build << pipeline.number >> latest
      - run:
          name: Scan CMS Container
          command: |
            SCAN_CMS_RESULT=0
            if (./bin/scan-container cms << pipeline.number >> high | tee /tmp/results/scan-cms-container.log); then export SCAN_CMS_RESULT=0; else export SCAN_CMS_RESULT=$?; fi
            echo "CMS Container Scan return code: $SCAN_CMS_RESULT" | tee -a /tmp/results/scan-cms-container.log
            cat /tmp/results/scan-cms-container.log
            exit 0
      - run:
          name: Scan WAF Container
          command: |
            SCAN_WAF_RESULT=0
            if (./bin/scan-container waf << pipeline.number >> high | tee /tmp/results/scan-waf-container.log); then export SCAN_WAF_RESULT=0; else export SCAN_WAF_RESULT=$?; fi
            echo "WAF Container Scan return code: $SCAN_WAF_RESULT" | tee -a /tmp/results/scan-waf-container.log
            cat /tmp/results/scan-waf-container.log
            exit 0
      - run:
          name: Create Container for CIS Benchmarks
          when: always
          command: |
            # build a fresh docker-bench-security container
            cd /tmp/
            git clone https://github.com/docker/docker-bench-security.git
            cd /tmp/docker-bench-security
            docker build --no-cache -t docker-bench-security .
      - run:
          name: Check CMS CIS Benchmarks
          when: always
          command: |
            # use the fresh container to scan
            SCAN_CMS_CIS_RESULT=0
            if (./bin/scan-container-cis cms << pipeline.number >> | tee /tmp/results/scan-cms-container-cis.log); then export SCAN_CMS_CIS_RESULT=0; else export SCAN_CMS_CIS_RESULT=$?; fi
            echo "CMS CIS Benchmark Scan return code: $SCAN_CMS_CIS_RESULT" | tee -a /tmp/results/scan-cms-container-cis.log
            cat /tmp/results/scan-cms-container-cis.log
            exit 0
      - run:
          name: Check WAF CIS Benchmarks
          when: always
          command: |
            # use the fresh container to scan
            SCAN_WAF_CIS_RESULT=0
            if (./bin/scan-container-cis waf << pipeline.number >> | tee /tmp/results/scan-waf-container-cis.log); then export SCAN_WAF_CIS_RESULT=0; else export SCAN_WAF_CIS_RESULT=$?; fi
            echo "WAF CIS Benchmark Scan return code: $SCAN_WAF_CMS_RESULT" | tee -a /tmp/results/scan-waf-container-cis.log
            cat /tmp/results/scan-waf-container-cis.log
            exit 0
      - run:
          name: Push Container to Docker Hub
          no_output_timeout: 30m
          command: |
            export DOCKER_CONTENT_TRUST=1
            ./bin/cloudgov/container-push << pipeline.number >> latest
      - install-cloud-foundry
      - save-image-digest
      - store_artifacts:
          path: /tmp/results

  deploy-to-cloudgov-dev:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - deploy-cloudgov:
          envname: dev

  deploy-to-cloudgov-stage:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - deploy-cloudgov:
          envname: stage

  deploy-to-cloudgov-prod:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - deploy-cloudgov:
          envname: prod

  snapshot-backup-dev:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - snapshot-backup:
          envname: dev

  snapshot-backup-stage:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - snapshot-backup:
          envname: stage

  snapshot-backup-prod:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - snapshot-backup:
          envname: prod

  deploy-reporter-tools:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - deploy-reporter:
          envname: tools

workflows:
  version: 2

  code-scans:
    jobs:
      - approve-code-scans:
          type: approval
      - scan-code:
          requires:
            - approve-code-scans

  commit:
    jobs:
      - lint

  snapshot-backup:
    jobs:
      - approve-snapshot-backup-dev:
          type: approval
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-DEV-SNAP(.*)/
            branches:
              ignore:
              - /.*/
      - snapshot-backup-dev:
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-DEV-SNAP(.*)/
            branches:
              ignore:
              - /.*/
          requires:
            - approve-snapshot-backup-dev

      - approve-snapshot-backup-stage:
          type: approval
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-STAGE-SNAP(.*)/
            branches:
              ignore:
              - /.*/
      - snapshot-backup-stage:
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-STAGE-SNAP(.*)/
            branches:
              ignore:
              - /.*/
          requires:
            - approve-snapshot-backup-stage

      - approve-snapshot-backup-prod:
          type: approval
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-PROD-SNAP(.*)/
            branches:
              ignore:
              - /.*/
      - snapshot-backup-prod:
          filters:
            tags:
              only:
              - /^USAGOV-(.*)-PROD-SNAP(.*)/
            branches:
              ignore:
              - /.*/
          requires:
            - approve-snapshot-backup-prod

  deploy-reporter:
    jobs:
      - approve-deploy-reporter:
          type: approval
          filters:
            branches:
              only:
                - dev
                - stage
                - prod
                - USAGOV-56-integrate-analytics-backend
      - deploy-reporter-tools:
          filters:
            branches:
              only:
                - dev
                - stage
                - prod
                - USAGOV-56-integrate-analytics-backend
          requires:
            - approve-deploy-reporter

  build-and-deploy:
    jobs:
      - approve-build-and-push-container:
          type: approval
          filters:
            branches:
              only:
                - dev
                - nav-items-menu-block
                - stage
                - prod
      - build-and-push-container:
          requires:
            - approve-build-and-push-container
          filters:
            branches:
              only:
                - dev
                - nav-items-menu-block
                - stage
                - prod
      - approve-dev-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only:
              - dev
              - nav-items-menu-block
      - deploy-to-cloudgov-dev:
          requires:
            - approve-dev-deployment
          filters:
            branches:
              only:
              - dev
              - nav-items-menu-block
      - approve-stage-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only: stage
      - deploy-to-cloudgov-stage:
          requires:
            - approve-stage-deployment
          filters:
            branches:
              only: stage

      - approve-prod-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only: prod
      - really-approve-prod-deployment:
          type: approval
          requires:
            - approve-prod-deployment
          filters:
            branches:
              only: prod
      - deploy-to-cloudgov-prod:
          requires:
            - really-approve-prod-deployment
          filters:
            branches:
              only: prod
