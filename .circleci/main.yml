version: 2.1
commands:
  deploy-cloudgov:
    parameters:
      envname:
        default: ""
        type: string
      cf_user:
        default: ""
        type: string
      cf_pass:
        default: ""
        type: string
    steps:
      - checkout
      - run:
          name: Setup Environment for use in Scripts
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | $SUDO tee /home/circleci/project/env.local
      - run:
          name: Install CloudFoundry
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf7-cli
            #curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            #curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&source=github-rel'
            #curl -v -L -o cf-cli_amd64.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.3.0&source=github-rel'
            #sudo dpkg -i cf-cli_amd64.deb
            cf -v
      - run:
          name: CloudGov Deploy
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            ./bin/cloudgov/login << parameters.cf_user >> << parameters.cf_pass >>
            ./bin/cloudgov/space << parameters.envname >>
            ./bin/cloudgov/deploy << pipeline.number >>

  install-node:
    steps:
      - run:
          name: Install Specific Node Version
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v16.8.0
            nvm alias default 16.8.0
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo "Install Gulp on node "$(node --version)
            sudo npm install --global gulp-cli

parameters:
  is_pr:
    type: boolean
    default: false

jobs:
  lint:
    docker:
      - image: cimg/php:8.0.16-node
    steps:
      - checkout
      - install-node
      - run:
          name: Install Linters and Sniffers
          command: |
            npm install --prefix ./themes/custom/usagov
            composer global require --dev drupal/coder php-parallel-lint/php-parallel-lint
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/phpcs --config-set installed_paths $COMPOSER_DIR/vendor/drupal/coder/coder_sniffer,$COMPOSER_DIR/vendor/sirbrillig/phpcs-variable-analysis,$COMPOSER_DIR/vendor/slevomat/coding-standard
      - run:
          name: PHP Lint
          command: |
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/parallel-lint -e php,module,inc,install,test,profile,theme ./modules/custom ./themes/custom
      - run:
          name: PHP CodeSniff (ignore warnings)
          command: |
            COMPOSER_DIR=$(composer -n config --global home)
            $COMPOSER_DIR/vendor/bin/phpcs -ns --standard=./.phpcs.xml.dist
      - run:
          name: Theme Lint
          command: npm run lint --prefix ./themes/custom/usagov

  install-container-dependencies:
    docker:
      - image: cimg/php:8.0.16-node
    steps:
      - checkout
      - install-node
      - run:
          name: Build Drupal
          command: |
            echo 'memory_limit = -1' | sudo tee -a /usr/local/etc/php/conf.d/docker-php-memlimit.ini
            COMPOSER_MEMORY_LIMIT=-1 composer install --ignore-platform-reqs --no-interaction --no-progress --optimize-autoloader
      - run:
          name: Compile Theme
          command: |
            cp -R ./libraries ./web
            cp -R ./modules ./web
            cp -R ./themes ./web
            npm install --prefix ./web/themes/custom/usagov
            npm rebuild node-sass --prefix ./web/themes/custom/usagov
            npm run build --prefix ./web/themes/custom/usagov
            rm -rf ./web/themes/custom/usagov/node_modules
      - persist_to_workspace:
          root: ./
          paths:
            - vendor
            - composer.lock
            - web

  build-and-push-container:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - checkout
      # - attach_workspace:
      #     at: /tmp/workspace
      # - run:
      #     name: Import Workspace items
      #     command: |
      #       mkdir -p ./vendor/
      #       mkdir -p ./web
      #       cp -r /tmp/workspace/vendor/* ./vendor/
      #       cp -r /tmp/workspace/composer.lock ./composer.lock
      #       cp -r /tmp/workspace/web/* ./web/
      - run:
          name: Setup Environment for use in Scripts
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            printenv | grep -i -v -E "^(PWD|OLDPWD|SHLVL|_)=" | sed -e 's/^\([^=]*=\)\(.*\)/export \1"\2"/' | $SUDO tee /home/circleci/project/env.local
      - run:
          name: Login to Docker Hub
          no_output_timeout: 30m
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            echo $DOCKERHUB_ACCESS_TOKEN | $SUDO docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build Container
          no_output_timeout: 30m
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            $SUDO ./bin/cloudgov/container-build << pipeline.number >> latest

      - run:
          name: Push Container to Docker Hub
          no_output_timeout: 30m
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            $SUDO ./bin/cloudgov/container-push << pipeline.number >> latest

  deploy-to-cloudgov-dev:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - deploy-cloudgov:
          envname: dev
          cf_user: $CF_DEV_USER
          cf_pass: $CF_DEV_PASS

  deploy-to-cloudgov-stage:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - deploy-cloudgov:
          envname: stage
          cf_user: $CF_STAGE_USER
          cf_pass: $CF_STAGE_PASS

  deploy-to-cloudgov-prod:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      BASH_ENV: /home/circleci/project/env.local
    steps:
      - deploy-cloudgov:
          envname: prod
          cf_user: $CF_PROD_USER
          cf_pass: $CF_PROD_PASS

  do-nothing:
    docker:
      - image: busybox:stable
    steps:
      - run: echo "Skipping"


workflows:
  version: 2

  commit:
    unless: << pipeline.parameters.is_pr >>
    jobs:
      - do-nothing

  pr-commit:
    when: << pipeline.parameters.is_pr >>
    jobs:
      - lint

  build-and-deploy:
    when: << pipeline.parameters.is_pr >>
    jobs:
      - approve-build-and-push-container:
          type: approval
          filters:
            branches:
              only: dev
      - build-and-push-container:
          requires:
            - approve-build-and-push-container
          filters:
            branches:
              only: dev

      - approve-dev-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only: dev
      - deploy-to-cloudgov-dev:
          requires:
            - approve-dev-deployment
          filters:
            branches:
              only: dev

      - approve-stage-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only: stage
      - deploy-to-cloudgov-stage:
          requires:
            - approve-stage-deployment
          filters:
            branches:
              only: stage

      - approve-prod-deployment:
          type: approval
          requires:
            - build-and-push-container
          filters:
            branches:
              only: prod
      - really-approve-prod-deployment:
          type: approval
          requires:
            - approve-prod-deployment
          filters:
            branches:
              only: prod
      - deploy-to-cloudgov-prod:
          requires:
            - really-approve-prod-deployment
          filters:
            branches:
              only: prod
