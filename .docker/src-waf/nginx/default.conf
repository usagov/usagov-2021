# Nginx configuration for both HTTP and SSL

# map $http_upgrade $connection_upgrade {
#     default upgrade;
#     '' close;
# }

server {

    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    resolver 127.0.0.11 valid=5s;
    # server_name localhost;
    # set $upstream http://localhost:80;

    ssl_certificate /etc/nginx/conf/server.crt;
    ssl_certificate_key /etc/nginx/conf/server.key;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_verify_client off;

    # catch urls that end in a trailing slash - assume they are dirs and need an index
    location ~* /$ {
      include /etc/nginx/snippets/ip-restrict.conf;
      include /etc/nginx/snippets/prepare-proxy.conf;

      default_type text/plain;
      return 200 "index-less https://${S3_PROXY}${cf_forwarded_uri}index.html";
    }

    # catch urls that end without an extension - assume they are dirs and need an index
    location ~* /[^./]+$ {
      include /etc/nginx/snippets/ip-restrict.conf;
      include /etc/nginx/snippets/prepare-proxy.conf;

      default_type text/plain;
      return 200 "extension-less https://${S3_PROXY}${cf_forwarded_uri}/index.html";
    }

    # catch all urls - assume they are not dirs and should be proxied directly
    location / {
      include /etc/nginx/snippets/ip-restrict.conf;
      include /etc/nginx/snippets/prepare-proxy.conf;

      default_type text/plain;
      return 200 "direct https://${S3_PROXY}${cf_forwarded_uri}";
    }

}
