ARG  NODE_BASE=node
FROM composer:latest AS composer-builder

ARG BUID=1000
ARG BGID=1000

RUN sed -E -i "s/:x:${BUID}:/:x:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:([0-9]+):${BGID}:/:x:\1:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:${BUID}:/:x:1919:/g" /etc/group \
    && sed -E -i "s/www-data:x:[0-9]+:[0-9]+:/www-data:x:${BUID}:${BGID}:/g" /etc/passwd \
    && sed -E -i "s/www-data:x:[0-9]+:/www-data:x:${BGID}:/g" /etc/group \
    && echo 'memory_limit = -1' | tee -a /usr/local/etc/php/conf.d/docker-php-memlimit.ini
    # && find /var/www -not -user $(id -u www-data) -not -group $(id -g www-data) -print0 | xargs -P 0 -0 --no-run-if-empty chown --no-dereference www-data:www-data

COPY --chown=www-data:www-data composer.json /var/www/composer.json
COPY --chown=www-data:www-data composer.lock /var/www/composer.lock
COPY --chown=www-data:www-data patches /var/www/patches

# pulled from composer.json installer-paths
RUN mkdir -p /var/www \
    && mkdir -p /var/www/vendor \
    && mkdir -p /var/www/web \
    && mkdir -p /var/www/web/core \
    && mkdir -p /var/www/web/libraries \
    && mkdir -p /var/www/web/modules \
    && mkdir -p /var/www/web/modules/contrib \
    && mkdir -p /var/www/web/modules/custom \
    && mkdir -p /var/www/web/profiles \
    && mkdir -p /var/www/web/profiles/contrib \
    && mkdir -p /var/www/web/profiles/custom \
    && mkdir -p /var/www/web/themes \
    && mkdir -p /var/www/web/themes/contrib \
    && mkdir -p /var/www/web/themes/custom \
    && mkdir -p /var/www/drush \
    && mkdir -p /var/www/drush/Commands \
    && mkdir -p /var/www/drush/Commands/contrib \
    && chown www-data:www-data /var/www \
    && chown www-data:www-data /var/www/vendor \
    && chown www-data:www-data /var/www/web \
    && chown www-data:www-data /var/www/web/core \
    && chown www-data:www-data /var/www/web/libraries \
    && chown www-data:www-data /var/www/web/modules \
    && chown www-data:www-data /var/www/web/modules/contrib \
    && chown www-data:www-data /var/www/web/modules/custom \
    && chown www-data:www-data /var/www/web/profiles \
    && chown www-data:www-data /var/www/web/profiles/contrib \
    && chown www-data:www-data /var/www/web/profiles/custom \
    && chown www-data:www-data /var/www/web/themes \
    && chown www-data:www-data /var/www/web/themes/contrib \
    && chown www-data:www-data /var/www/web/themes/custom \
    && chown www-data:www-data /var/www/drush \
    && chown www-data:www-data /var/www/drush/Commands \
    && chown www-data:www-data /var/www/drush/Commands/contrib

WORKDIR /var/www

USER www-data

RUN composer -n config --global allow-plugins true \
    && composer global require --dev drupal/coder php-parallel-lint/php-parallel-lint monolog/monolog\
    && COMPOSER_DIR=$(composer -n config --global home) && echo $COMPOSER_DIR \
    && $COMPOSER_DIR/vendor/bin/phpcs --config-set installed_paths $COMPOSER_DIR/vendor/drupal/coder/coder_sniffer,$COMPOSER_DIR/vendor/sirbrillig/phpcs-variable-analysis,$COMPOSER_DIR/vendor/slevomat/coding-standard
RUN COMPOSER_MEMORY_LIMIT=-1 composer install --ignore-platform-reqs --no-interaction --optimize-autoloader \
    && chown www-data:www-data /var/www/composer.json /var/www/composer.lock

# USER www-data
###############################################################
FROM ${NODE_BASE}:18-alpine3.16 AS theme-builder

ARG BUID=1000
ARG BGID=1000

RUN sed -E -i "s/:x:${BUID}:/:x:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:([0-9]+):${BGID}:/:x:\1:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:${BGID}:/:x:1919:/g" /etc/group \
    && sed -E -i "s/node:x:[0-9]+:[0-9]+:/node:x:${BUID}:${BGID}:/g" /etc/passwd \
    && sed -E -i "s/node:x:[0-9]+:/node:x:${BGID}:/g" /etc/group
RUN apk upgrade --update \
    && apk add --no-cache --virtual .persistent-deps \
      ca-certificates \
      curl \
      git \
      openssh \
      python3 \
      py3-pip \
      && ln -sf python3 /usr/bin/python

RUN apk --update add python3 nodejs npm git openssh && apk add g++ make

COPY bin/src/phantomjs.sh /local/phantomjs.sh
RUN . /local/phantomjs.sh
RUN npm install --global \
      gulp \
    && chown -R node:node /home/node/

#      gulp-cli \

COPY --chown=node:node web/themes/custom/ /var/www/web/themes/custom/
COPY --chown=node:node web/libraries/ /var/www/web/libraries/
COPY --chown=node:node --from=composer-builder /var/www/web/themes/ /var/www/web/themes/
COPY --chown=node:node --from=composer-builder /var/www/web/libraries/ /var/www/web/libraries/

WORKDIR /var/www/web/themes/custom/usagov

RUN chown -R node:node /var/www/web/themes \
    && chown -R node:node /home/node/

USER node

RUN npm install --production=false --prefix /var/www/web/themes/custom/usagov \
    && npm rebuild node-sass --prefix /var/www/web/themes/custom/usagov \
    && npm run build --prefix /var/www/web/themes/custom/usagov \
    && chown -R node:node /var/www/web/themes

###############################################################


FROM alpine:3.16 AS cms
LABEL MAINTAINER=dan@mobomo.com

ARG S6_VERSION
ENV S6_VERSION ${S6_VERSION:-v2.2.0.3}

ARG GITBRANCH
ENV GITBRANCH ${GITBRANCH:-none}

ARG GITCOMMIT
ENV GITCOMMIT ${GITCOMMIT:-none}

ARG GITTAG
ENV GITTAG ${GITTAG:-none}

ARG CONTAINERTAG
ENV CONTAINERTAG ${CONTAINERTAG:-none}

ARG BUID=1000
ARG BGID=1000

ADD https://github.com/just-containers/s6-overlay/releases/download/${S6_VERSION}/s6-overlay-amd64.tar.gz /tmp/s6overlay.tar.gz

# Dependancies
RUN sed -E -i "s/:x:${BUID}:/:x:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:([0-9]+):${BGID}:/:x:\1:1919:/g" /etc/passwd \
    && sed -E -i "s/:x:${BGID}:/:x:1919:/g" /etc/group \
    && sed -E -i "s/nginx:x:[0-9]+:[0-9]+:/nginx:x:${BUID}:${BGID}:/g" /etc/passwd \
    && sed -E -i "s/nginx:x:[0-9]+:/nginx:x:${BGID}:/g" /etc/group \
    && addgroup -S -g $BGID nginx \
    && adduser -S -G nginx -D -H -u $BUID nginx \
    && apk upgrade --update \
    && apk add --no-cache --virtual .persistent-deps \
      aws-cli \
      ca-certificates \
      curl \
      gettext \
      git \
      inotify-tools \
      jq \
      moreutils \
      pv \
      tar \
      xz \
      vim \
      mysql-client \
      mariadb-connector-c \
      nginx \
      nginx-mod-http-lua \
      php8 \
      php8-fpm \
      php8-bcmath \
      php8-bz2 \
      php8-calendar \
      php8-curl \
      php8-ctype \
      php8-dom \
      php8-fileinfo \
      php8-ftp \
      php8-gd \
      php8-intl \
      php8-iconv \
      php8-imap \
      php8-intl \
      php8-json \
      php8-ldap \
      php8-mbstring \
      php8-mysqlnd \
      php8-openssl \
      php8-opcache \
      php8-pcntl \
      php8-pdo \
      php8-pdo_mysql \
      php8-pdo_sqlite \
      php8-pear \
      php8-pecl-imagick \
      php8-pecl-xdebug \
      php8-phar \
      php8-posix \
      php8-session \
      php8-simplexml \
      php8-shmop \
      php8-soap \
      php8-sockets \
      php8-sodium \
      php8-sqlite3 \
      php8-sysvmsg \
      php8-sysvsem \
      php8-sysvshm \
      php8-tokenizer \
      php8-tidy \
      php8-xsl \
      php8-xml \
      php8-xmlreader \
      php8-xmlwriter \
      php8-zip \
      php8-zlib \
    && mkdir -p /var/www/web/sites/default/files \
    # s6 supervisor setup
    && tar xzf /tmp/s6overlay.tar.gz -C / \
    && rm /tmp/s6overlay.tar.gz \
    && mkdir -p /var/run/s6 \
    && chown -R nginx:nginx /var/run/s6 \
    # webserver setup
    && mkdir -p /var/www/ \
    && chown -R nginx:nginx /var/www \
    && mkdir -p /var/log/nginx \
    && chown -R nginx:nginx /var/log/nginx \
    && ln -s /dev/stderr /var/log/nginx/error.log \
    && ln -s /dev/stdout /var/log/nginx/access.log \
    && mkdir -p /run/nginx/ \
    && touch /run/nginx/nginx.pid \
    # php setup
    && ln -s /usr/sbin/php-fpm8 /usr/sbin/php-fpm

    # new relic setup
COPY bin/src/newrelic.sh /local/newrelic.sh
RUN . /local/newrelic.sh

    # cron setup
Run mkdir -p /etc/periodic/30min \
    && echo "*/30    *       *       *       *       run-parts /etc/periodic/30min" >> /etc/crontabs/root \
    # cleanup
    && rm -rf /var/cache/apk/*

ENV PATH=/var/www/vendor/bin:$PATH

COPY .docker/src-cms/etc /etc
COPY .docker/motd /etc/motd
COPY --chown=nginx:nginx composer.json /var/www/composer.json
COPY --chown=nginx:nginx composer.lock /var/www/composer.lock
COPY --chown=nginx:nginx scripts /var/www/scripts
COPY --chown=nginx:nginx config /var/www/config
COPY --chown=nginx:nginx patches /var/www/patches
COPY --chown=nginx:nginx webroot /var/www/webroot
COPY --chown=nginx:nginx web/libraries /var/www/web/libraries
COPY --chown=nginx:nginx web/modules /var/www/web/modules
COPY --chown=nginx:nginx web/themes /var/www/web/themes
COPY --chown=nginx:nginx web/sites/default /var/www/web/sites/default
COPY --chown=nginx:nginx website-analytics /var/www/website-analytics
COPY --from=composer-builder --chown=nginx:nginx /var/www/vendor /var/www/vendor
COPY --from=composer-builder --chown=nginx:nginx /var/www/web /var/www/web
COPY --from=theme-builder --chown=nginx:nginx /var/www/web/themes/custom /var/www/web/themes/custom

RUN chmod -R +x /etc/periodic \
    && rm -f /var/www/web/sites/default/settings.local.php \
    && rm -rf /var/www/web/sites/default/files/* \
    && rm -rf /var/www/web/themes/custom/usagov/node_modules \
    && chown nginx:nginx /var/www \
    && find /var/www -not -user $(id -u nginx) -not -group $(id -g nginx) -print0 | xargs -P 0 -0 --no-run-if-empty chown --no-dereference nginx:nginx \
    && echo "    built:" $(date) >> /etc/motd \
    && echo "    branch: " $GITBRANCH >> /etc/motd \
    && echo "    gittag: " $GITTAG >> /etc/motd \
    && echo "    commit: " $GITCOMMIT >> /etc/motd \
    && echo "    containertag: " $CONTAINERTAG >> /etc/motd \
    && echo >> /etc/motd \
    && cp /etc/motd /var/www/web/version.txt \
    && echo "PATH=$PATH" > /etc/profile.d/drupal.sh

EXPOSE 80

WORKDIR /var/www

HEALTHCHECK CMD s6-svstat /var/run/s6/services/nginx \
  && s6-svstat /var/run/s6/services/php \
  && s6-svstat /var/run/s6/services/cron \
  && s6-svstat /var/run/s6/services/cert-watcher

# Init s6
ENTRYPOINT [ "/init" ]
