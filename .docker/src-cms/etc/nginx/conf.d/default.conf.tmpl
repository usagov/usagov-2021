# S3 traffic
server {
    listen 80;

    server_name ${WWW_HOST};

    resolver ${DNS_SERVER} valid=5s ipv6=off;

    proxy_http_version     1.1;
    proxy_redirect         off;
    proxy_set_header       Connection "";
    proxy_set_header       Authorization '';
    proxy_set_header       Host ${S3_HOST};
    proxy_set_header       X-Real-IP $remote_addr;
    proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;
    proxy_hide_header      x-amz-meta-server-side-encryption;
    proxy_hide_header      x-amz-server-side-encryption;
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   Set-Cookie;
    proxy_intercept_errors on;
    add_header             Cache-Control max-age=31536000;

    set_by_lua $request_uri_lowercase "return string.lower(ngx.var.uri)";

    # english 404 chain
    location @notFoundEnglish {
      allow all;
      error_page 404 403 @notFoundEnglishFallback;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $errorfile "${S3_PROXY_WEB}${EN_404_PAGE}";
      proxy_pass https://$errorfile;
    }
    location @notFoundEnglishFallback {
      allow all;
      default_type text/plain;
      return 404 'English Page Not Found';
    }

    # spanish 404 chain
    location @notFoundSpanish {
      allow all;
      error_page 404 403 @notFoundSpanishFallback;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $errorfile "${S3_PROXY_WEB}${ES_404_PAGE}";
      proxy_pass https://$errorfile;
    }
    location @notFoundSpanishFallback {
      allow all;
      default_type text/plain;
      return 404 'Spanish Page Not Found';
    }

    # spanish main url - easier as a separate case vs in another regex
    location ~* ^/(es)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch urls that end in a trailing slash - assume they are dirs and need an index
    location ~* ^/(es/(.+/)?)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch urls that end without an extension or trailing slash - assume they are dirs and need an index
    location ~* ^/(es/(.*/)?[^\./]+)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch all urls - assume they are not dirs and should be proxied directly
    location ~* ^/(es/.*) {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}";
      proxy_pass https://$indexfile;
    }

    # catch urls that end in a trailing slash - assume they are dirs and need an index
    location ~* /(.*/)?$ {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}index.html";
      proxy_pass https://$indexfile;
    }
    # catch urls that end without an extension or trailing slash - assume they are dirs and need an index
    location ~* /([^\./]+)$ {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # catch all urls - assume they are not dirs and should be proxied directly
    location ~* (.*) {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}";
      proxy_pass https://$indexfile;
    }

}
server {
    listen 443 ssl;
    include partials/ssl.conf;

    server_name ${WWW_HOST};

    resolver ${DNS_SERVER} valid=5s ipv6=off;

    proxy_http_version     1.1;
    proxy_redirect         off;
    proxy_set_header       Connection "";
    proxy_set_header       Authorization '';
    proxy_set_header       Host ${S3_HOST};
    proxy_set_header       X-Real-IP $remote_addr;
    proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;
    proxy_hide_header      x-amz-meta-server-side-encryption;
    proxy_hide_header      x-amz-server-side-encryption;
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   Set-Cookie;
    proxy_intercept_errors on;
    add_header             Cache-Control max-age=31536000;

    set_by_lua $request_uri_lowercase "return string.lower(ngx.var.uri)";

    # english 404 chain
    location @notFoundEnglish {
      allow all;
      error_page 404 403 @notFoundEnglishFallback;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $errorfile "${S3_PROXY_WEB}${EN_404_PAGE}";
      proxy_pass https://$errorfile;
    }
    location @notFoundEnglishFallback {
      allow all;
      default_type text/plain;
      return 404 'English Page Not Found';
    }

    # spanish 404 chain
    location @notFoundSpanish {
      allow all;
      error_page 404 403 @notFoundSpanishFallback;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $errorfile "${S3_PROXY_WEB}${ES_404_PAGE}";
      proxy_pass https://$errorfile;
    }
    location @notFoundSpanishFallback {
      allow all;
      default_type text/plain;
      return 404 'Spanish Page Not Found';
    }


    # spanish main url - easier as a separate case vs in another regex
    location ~* ^/(es)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch urls that end in a trailing slash - assume they are dirs and need an index
    location ~* ^/(es/(.+/)?)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch urls that end without an extension or trailing slash - assume they are dirs and need an index
    location ~* ^/(es/(.*/)?[^\./]+)$ {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # spanish catch all urls - assume they are not dirs and should be proxied directly
    location ~* ^/(es/.*) {
      error_page 404 403 @notFoundSpanish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}";
      proxy_pass https://$indexfile;
    }

    # english catch urls that end in a trailing slash - assume they are dirs and need an index
    location ~* /(.*/)?$ {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}index.html";
      proxy_pass https://$indexfile;
    }
    # english catch urls that end without an extension or trailing slash - assume they are dirs and need an index
    location ~* /([^\./]+)$ {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}/index.html";
      proxy_pass https://$indexfile;
    }
    # english catch all urls - assume they are not dirs and should be proxied directly
    location ~* (.*) {
      error_page 404 403 @notFoundEnglish;
      proxy_intercept_errors on;
      recursive_error_pages on;
      set $indexfile "${S3_PROXY_WEB}${request_uri_lowercase}";
      proxy_pass https://$indexfile;
    }

}

# CMS Traffic
server {
    listen 80 default_server;

    server_name ${CMS_HOST} _;

    root   /var/www/web;

    fastcgi_temp_path      /tmp/nginx_fastcgi 1 2;
    client_body_temp_path  /tmp/nginx_client_body 1 2;
    proxy_temp_path        /tmp/nginx_proxy 1 2;

    real_ip_header         x-forwarded-for;
    set_real_ip_from       10.0.0.0/8;
    real_ip_recursive      on;

    include partials/drupal.conf;

}
server {
    listen 443 ssl default_server;
    include partials/ssl.conf;
    server_name ${CMS_HOST} _;

    root   /var/www/web;

    fastcgi_temp_path      /tmp/nginx_fastcgi 1 2;
    client_body_temp_path  /tmp/nginx_client_body 1 2;
    proxy_temp_path        /tmp/nginx_proxy 1 2;

    real_ip_header         x-forwarded-for;
    set_real_ip_from       10.0.0.0/8;
    real_ip_recursive      on;

    include partials/drupal.conf;

}
